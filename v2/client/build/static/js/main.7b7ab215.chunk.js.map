{"version":3,"sources":["utils/routeUtils.js","routes.js","utils/styleUtils.js","components/homepage/header.js","utils/urlUtils.js","components/homepage/valueProp/valuePropSection.js","components/homepage/valueProp.js","constants.js","graphql/venueQueries.js","graphql/userQueries.js","utils/userUtils.js","components/homepage/signup.js","components/homePage.js","graphql/cityQueries.js","components/dashboard/cityFormField.js","components/dashboard/venueTypeFormField.js","utils/venueUtils.js","providers/sessionNotificationProvider.js","hooks/useSessionNotification.js","graphql/venueMutations.js","graphql/venueCache.js","components/dashboard/addVenueDialog/similarVenuesByName.js","components/dashboard/addVenueDialog.js","utils/validationUtils.js","components/dashboard/venueTypeTabs.js","components/dashboard/venueListItem.js","components/dashboard/venueList.js","graphql/userMutations.js","utils/dateUtils.js","components/dashboard/feedItem.js","components/dashboard/venueTypeMultiFormField.js","components/dashboard/feedConfigurator.js","components/dashboard/feed.js","components/shared/withPageTemplate.js","components/dashboard/followers.js","components/dashboardPage.js","components/venue/header.js","components/venue/similarVenues.js","components/venue/locationInfo.js","components/venue/favoriteButton.js","components/venuePage.js","theme.js","components/shared/loginDialog.js","components/shared/loginButton.js","layout/appBar/appBarMenu.js","graphql/messagesQueries.js","layout/appBar/unreadMessagesIndicator.js","layout/appBar/appBarMessages.js","layout/appBar.js","layout/appBarContainer.js","layout/sessionNotifications.js","components/userProfile/sideVenueWidget.js","components/userProfile/userProfileHeader.js","components/userProfilePage.js","graphql/messagesMutations.js","components/messages/message.js","components/messages/composeMessage.js","components/messagesPage.js","App.js","serviceWorker.js","index.js"],"names":["isHomepage","location","pathname","Routes","home","encodeUserId","userId","btoa","dashboard","dashboardPath","section","venue","venuePath","venueSlug","messages","messagesPath","userProfile","userProfilePath","validatePageSection","options","fallback","Object","values","includes","headerStyles","imageUrl","height","container","display","justifyContent","alignItems","background","backgroundSize","headerText","color","headerStyle","process","Header","style","Typography","variant","ValuePropSection","props","title","icon","text","iconStyle","width","className","discoverContent","trackContent","shareContent","ValueProp","AUTH_TOKEN","USER_INFO","VenueDetails","gql","VenueStats","GET_VENUE_BY_SLUG","GET_VENUES_FOR_CURRENT_USER","GET_VENUE_TYPES","GET_SIMILAR_VENUES_IN_RADIUS","GET_SIMILAR_VENUES_BY_NAME","GET_FEED_VENUES","CURRENT_USER_QUERY","CURRENT_USER_FEED_CONFIG_QUERY","GET_USER_PROFILE_BY_PUBLIC_ID","GET_FOLLOWERS_FOR_CURRENT_USER","isUserLoggedIn","localStorage","getItem","setUserInfo","token","user","setItem","JSON","stringify","withCurrentUser","WrappedComponent","compose","graphql","data","currentUser","shortName","firstName","lastName","SignUpSection","onClick","event","Event","window","dispatchEvent","openSignUpDialog","HomePage","GET_CITIES","position","formControl","minWidth","marginTop","marginBottom","CityFormField","onCitySelected","isMulti","fieldLabel","placeholder","containerWidth","containerDisplay","initialValue","client","useApolloClient","useState","query","setQuery","selectedOption","setSelectedOption","setOptions","useEffect","length","variables","limit","getSuggestions","then","cities","map","city","value","id","label","name","state","Array","isArray","FormControl","InputLabel","shrink","htmlFor","defaultValue","onChange","option","onInputChange","isClearable","menuIsOpen","escapeClearsValue","VenueTypeFormField","onVenueTypeSelected","useQuery","loading","error","message","Select","target","inputProps","venueTypes","venueType","MenuItem","key","venueMapLink","address","streetAddress","zipcode","encodeURIComponent","venuePrimaryTypeName","venueCityState","venueAddress","separator","format","SessionNotificationContext","createContext","notifications","addNotification","clearNotifications","SessionNotificationProvider","children","setNotifications","contextValue","useCallback","type","concat","Provider","SessionNotificationType","useSessionNotification","useContext","CREATE_VENUE_MUTATION","CREATE_USER_VENUE_FAVORITE_MUTATION","DELETE_USER_VENUE_FAVORITE_MUTATION","updateVenueStatsCache","store","venueStats","ROOT_QUERY","readQuery","writeQuery","venueBySlug","SimilarVenuesByName","history","useHistory","selectedSimilarVenue","setSelectedSimilarVenue","useLazyQuery","getSimilarVenuesByName","similarVenuesByNameResults","refetchQueries","useMutation","onError","console","log","update","createUserVenueFavorite","slug","push","addFavoriteVenue","getSimilarVenuesCallback","cityId","addFavoriteCallback","venueId","similarVenuesByName","similarVenue","to","appBar","margin","body","input","venueStub","lat","lng","AddVenueDialog","open","toggleDialog","onCreatedVenue","onCompleted","awaitRefetchQueries","addVenue","newVenue","setNewVenue","userActionText","setUserActionText","handleChange","Dialog","onClose","fullScreen","aria-labelledby","AppBar","Toolbar","IconButton","edge","aria-label","DialogTitle","DialogContent","DialogContentText","TextField","venueTypeId","autoComplete","customInput","Button","valid","isNaN","parseInt","indexOf","validateVenue","typeId","response","withStyles","boxShadow","float","tabIndicator","backgroundColor","classes","venues","venueTypeFilter","onSetVenueTypeFilter","Fragment","Tabs","e","indicator","orientation","scrollButtons","Tab","results","x","keys","getVenueTypes","sort","index","border","borderRadius","padding","marginRight","fontSize","fontWeight","lineHeight","textDecoration","marginLeft","textTransform","textAlign","top","showDeleteFavoriteButton","onDeleteFavoriteCallback","deleteUserVenueFavorite","updateFavoriteStats","deleteFavorite","cssClass","venueIconComponent","Restaurant","Museum","Pets","DirectionsWalk","Nature","NaturePeople","DirectionsRun","NearMe","venueTypeIcon","href","rel","currentDashboardSection","isFavoritesDashboardSection","externalTriggerVenueRefresh","setVenueTypeFilter","setVenues","triggerVenueRefresh","setTriggerVenueRefresh","me","favoriteVenues","onDeleteFavorite","filter","SIGNUP_MUTATION","LOGIN_MUTATION","UPDATE_CURRENT_USER_FEED_CONFIG_MUTATION","CREATE_USER_FOLLOWER_MUTATION","DELETE_USER_FOLLOWER_MUTATION","sinceCreated","timestamp","prefix","Date","diffSeconds","getTime","Math","round","toLocaleTimeString","year","month","day","hour","minute","toLocaleDateString","messageTimeStampFormat","borderBottom","creator","createdAt","VenueTypeMultiFormField","defaultVenueTypeIds","split","isSearchable","FeedConfigurator","feedConfiguration","onFeedConfigurationUpdated","cityIds","setCityIds","venueTypeIds","setVenueTypeIds","ids","join","cityDetails","maxWidth","feedVenues","setFeedVenues","first","init","setFeedConfiguration","updateCurrentUserFeedConfigMutation","userFeedConfig","newFeedConfiguration","withPageTemplate","this","React","Component","Followers","followData","setFollowData","deleteUserFollower","stats","followees","followee","publicId","followers","follower","DASHBOARD_SECTION","FEED","MY_DESTINATIONS","FAVORITES","FOLLOWERS","flexGrow","cursor","letterSpacing","match","params","dialogOpen","setDialogOpen","setExternalTriggerVenueRefresh","renderDashboardSection","dashboardSection","Add","renderDashboardSectionContent","VenueHeader","image","venueHeaderImage","SimilarVenues","similarVenues","setSimilarVenues","radius","LocationInfo","FavoriteButton","favoriteByCurrentUser","onUpdateFavoritesStats","addFavorite","preventDefault","pageStyle","sectionHeader","columnWrapper","mainColumn","sideColumm","VenuePage","setVenue","venueTypeName","setVenueTypeName","favorites","thousandSeparator","displayType","pluralize","description","createMuiTheme","palette","primary","main","blue","default","typography","useNextVariants","LoginDialog","login","undefined","email","password","errorMessage","_update","cache","info","a","_confirm","signup","_saveUserData","document","_error","graphQLErrors","setState","extensions","exception","errors","prevProps","fullWidth","dialogMainError","dialogMainContent","DialogActions","mutation","withRouter","flexDirection","setLogin","callback","addEventListener","renderUserInfo","anchorEl","setAnchorEl","toggleMenu","currentTarget","menuWrapper","menuButton","Boolean","component","RouterLink","removeItem","GET_MESSAGE_COUNT","GET_CONVERSATIONALISTS","GET_CONVERSATION","UnreadMessagesIndicator","unreadFlag","setUnreadFlag","fetchPolicy","messageCount","unread","AppBarMessages","messagesButton","ButtonAppBar","render","root","logoText","grow","loginButton","styles","nonHomepageStyles","borderBottomColor","blueGrey","currentStyles","AppBarWithStyles","SessionNotifications","notification","SideVenueWidget","createUserFollower","createUserFollowerLoading","deleteUserFollowerLoading","config","headerImageUrl","created","favorited","followedByCurrentUser","followsCurrentUser","setUserProfile","recentAddedVenues","recentFavoriteVenues","UPDATE_CONVERSATION_MUTATION","CREATE_MESSAGE_MUTATION","Message","currentUserId","sender","status","useStyles","makeStyles","theme","button","spacing","maxHeight","ComposeMessage","conversationalistUserId","onMessageCreated","setMessage","composeEndRef","useRef","createMessage","current","focus","multiline","rowsMax","inputRef","endIcon","messageType","onSendMessage","setConversationalistUserId","conversationalists","setConversationalists","currentConversation","setCurrentConversation","messagesEndRef","isNewConversationalist","getUserProfile","conversation","markConversationAsRead","getConversation","updateConversation","setTimeout","tempUserId","encodedUserId","atob","scrollToBottom","scrollIntoView","behavior","conversationalist","ref","App","CssBaseline","appBarSpacer","exact","path","DashboardPage","UserProfilePage","MessagesPage","fontFamily","hostname","httpLink","HttpLink","uri","credentials","headers","authorization","ApolloClient","link","ApolloLink","from","networkError","locations","InMemoryCache","typePolicies","User","fields","merge","resolvers","userInfo","parse","__typename","getUserInfoFromStorage","ReactDOM","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.7b7ab215.chunk.js","sourcesContent":["import Routes from '../routes'\n\nexport const isHomepage = location => location.pathname === Routes.home\n\nexport const encodeUserId = userId => btoa(userId * 999999999)\n\nexport const decodeUserId = encodedUserId => atob(encodedUserId) / 999999999\n","import { encodeUserId } from './utils/routeUtils'\n\nconst Routes = {\n  home: '/',\n  dashboard: '/dashboard/:section?',\n  dashboardPath: section => `/dashboard/${section}`,\n  venue: '/venue/:venueSlug',\n  venuePath: venueSlug => `/venue/${venueSlug}`,\n  messages: '/messages/:publicId?',\n  messagesPath: userId => `/messages/${!!userId ? encodeUserId(userId) : ''}`,\n  userProfile: '/user/:userId',\n  userProfilePath: userId => `/user/${encodeUserId(userId)}`,\n  validatePageSection: (section, options, fallback) =>\n    Object.values(options).includes(section) ? section : fallback\n}\n\nexport default Routes\n","export const headerStyles = (imageUrl, height) => {\n  return {\n    container: {\n      display: 'flex',\n      // flexWrap: 'wrap',\n      // flexDirection: 'column',\n      justifyContent: 'center',\n      alignItems: 'center',\n      background: `linear-gradient(rgba(0, 0, 0, 0.5),rgba(0, 0, 0, 0.5)),url(${imageUrl}) 50% 50% no-repeat`,\n      backgroundSize: 'cover',\n      height: height\n    },\n    headerText: {\n      color: '#ffffff'\n    }\n  }\n}\n","import React from 'react'\nimport Typography from '@material-ui/core/Typography'\nimport { headerStyles } from '../../utils/styleUtils'\nimport { S3_ASSETS_URL } from '../../utils/urlUtils'\n\nconst headerStyle = headerStyles(\n  `${S3_ASSETS_URL}venue-header-backgrounds/family-biking-cmp.jpg`,\n  '700px'\n)\n\nconst Header = () => {\n  return (\n    <div style={headerStyle.container}>\n      <Typography variant=\"h2\" style={headerStyle.headerText}>\n        <strong>Experience</strong> childhood, again.\n      </Typography>\n    </div>\n  )\n}\n\nexport default Header\n","export const GOOGLE_DIRECTIONS_URL = 'https://maps.google.com/?daddr='\n\nexport const S3_ASSETS_URL = process.env.REACT_APP_S3_ASSETS_URL\n","import React from 'react'\n\nimport './valuePropSection.css'\n\nconst ValuePropSection = props => {\n  const { title, icon, text } = props\n  const iconStyle = {\n    background: `url(/images/icons/${icon}.png) 0% 0% / 60px 60px no-repeat`,\n    width: '60px',\n    height: '60px'\n  }\n\n  return (\n    <div className=\"value-prop-section\">\n      <div className=\"value-prop-title\">{title}</div>\n      <div className=\"value-prop-icon\" style={iconStyle}></div>\n      <div className=\"value-prop-text\">{text}</div>\n    </div>\n  )\n}\n\nexport default ValuePropSection\n","import React from 'react'\n\nimport ValuePropSection from './valueProp/valuePropSection'\nimport './valueProp.css'\n\nconst discoverContent = {\n  title: 'Discover',\n  icon: 'discover',\n  text: `Find out about great local places to visit with your family. From restaurants, to museums, \n\tparks and playgrounds, make the most of your time!`\n}\n\nconst trackContent = {\n  title: 'Track',\n  icon: 'track',\n  text: `Had a great time sharing a meal with your family or enjoyed a hiking trail? Jot it down to build your \n\troster of go-to places for your future trips.`\n}\n\nconst shareContent = {\n  title: 'Share',\n  icon: 'share',\n  text: `Share your favorite places to visit with friends and family; hear about what others are \n\tenjoying, for great new ideas.`\n}\n\nconst ValueProp = () => {\n  return (\n    <div className=\"value-prop-container\">\n      <ValuePropSection {...discoverContent} />\n      <ValuePropSection {...trackContent} />\n      <ValuePropSection {...shareContent} />\n    </div>\n  )\n}\n\nexport default ValueProp\n","export const AUTH_TOKEN = 'auth-token'\nexport const USER_INFO = 'user-info'","import { gql } from '@apollo/client'\n\nexport const VenueDetails = gql`\n  fragment VenueDetails on Venue {\n    id\n    name\n    slug\n    description\n    streetAddress\n    zipcode\n    city\n    state\n    lat\n    lng\n    venueTypes {\n      id\n      name\n      image\n    }\n  }\n`\n\nconst VenueStats = gql`\n  fragment VenueStats on Venue {\n    venueStats {\n      favorites\n      favoriteByCurrentUser\n    }\n  }\n`\n\nexport const GET_VENUE_BASICS = gql`\n  query($venueId: ID!) {\n    venue(id: $venueId) {\n      ...VenueDetails\n    }\n  }\n  ${VenueDetails}\n`\n\nexport const GET_VENUE_ADVANCED = gql`\n  query($venueId: ID!) {\n    venue(id: $venueId) {\n      ...VenueDetails\n      ...VenueStats\n    }\n  }\n  ${VenueDetails}\n  ${VenueStats}\n`\n\nexport const GET_VENUE_BY_SLUG = gql`\n  query($venueSlug: String!) {\n    venueBySlug(slug: $venueSlug) {\n      ...VenueDetails\n      ...VenueStats\n    }\n  }\n  ${VenueDetails}\n  ${VenueStats}\n`\n\nexport const GET_VENUES_FOR_CURRENT_USER = gql`\n  query {\n    me {\n      id\n      venues {\n        ...VenueDetails\n      }\n      favoriteVenues {\n        ...VenueDetails\n      }\n    }\n  }\n  ${VenueDetails}\n`\n\nexport const GET_VENUE_TYPES = gql`\n  query {\n    venueTypes {\n      id\n      name\n      image\n    }\n  }\n`\n\nexport const GET_SIMILAR_VENUES_IN_RADIUS = gql`\n  query($venueId: ID!, $limit: Int, $radius: Int) {\n    similarVenues(id: $venueId, first: $limit, radius: $radius) {\n      id\n      name\n      slug\n      streetAddress\n      zipcode\n      city\n    }\n  }\n`\n\nexport const GET_SIMILAR_VENUES_BY_NAME = gql`\n  query($name: String!, $cityId: Int, $limit: Int) {\n    similarVenuesByName(name: $name, cityId: $cityId, first: $limit) {\n      id\n      name\n      slug\n      streetAddress\n      zipcode\n      city\n      state\n      venueTypes {\n        id\n        name\n      }\n    }\n  }\n`\n\nexport const GET_FEED_VENUES = gql`\n  query($cityIds: String, $venueTypeIds: String, $sort: String, $first: Int) {\n    venues(\n      cityIds: $cityIds\n      venueTypeIds: $venueTypeIds\n      sort: $sort\n      first: $first\n    ) {\n      id\n      createdAt\n      name\n      slug\n      description\n      streetAddress\n      zipcode\n      city\n      state\n      lat\n      lng\n      creator {\n        id\n        firstName\n        lastName\n      }\n      venueTypes {\n        id\n        name\n        image\n      }\n    }\n  }\n`\n","import { gql } from '@apollo/client'\nimport { VenueDetails } from './venueQueries'\n\nexport const CURRENT_USER_QUERY = gql`\n  query {\n    currentUser @client {\n      id\n      firstName\n      lastName\n    }\n  }\n`\n\nexport const CURRENT_USER_FEED_CONFIG_QUERY = gql`\n  query {\n    userFeedConfig {\n      cityIds\n      venueTypeIds\n      cityDetails {\n        id\n        name\n        state\n      }\n    }\n  }\n`\n\nexport const GET_USER_PROFILE_BY_PUBLIC_ID = gql`\n  query($publicId: String!) {\n    userProfile(publicId: $publicId) {\n      publicId\n      user {\n        id\n        firstName\n        lastName\n        zipcode\n      }\n      config {\n        headerImageUrl\n      }\n      stats {\n        created\n        favorited\n        followedByCurrentUser\n        followsCurrentUser\n        followers\n        followees\n      }\n      recentFavoriteVenues {\n        ...VenueDetails\n      }\n      recentAddedVenues {\n        ...VenueDetails\n      }\n    }\n  }\n  ${VenueDetails}\n`\n\nexport const GET_FOLLOWERS_FOR_CURRENT_USER = gql`\n  query {\n    me {\n      id\n      stats {\n        followers\n        followees\n      }\n      followees {\n        id\n        publicId\n        firstName\n        lastName\n      }\n      followers {\n        id\n        publicId\n        firstName\n        lastName\n      }\n    }\n  }\n`\n","import { AUTH_TOKEN, USER_INFO } from '../constants'\nimport { graphql } from '@apollo/client/react/hoc'\nimport { compose } from 'recompose'\nimport { CURRENT_USER_QUERY } from '../graphql/userQueries'\n\nexport const isUserLoggedIn = () => !!localStorage.getItem(AUTH_TOKEN)\n\nexport const logoutUser = () => {\n  localStorage.removeItem(AUTH_TOKEN)\n  localStorage.removeItem(USER_INFO)\n}\n\nexport const setUserInfo = (token, user) => {\n  localStorage.setItem(AUTH_TOKEN, token)\n  localStorage.setItem(USER_INFO, JSON.stringify(user))\n}\n\nexport const getUserInfoFromStorage = () => {\n  const userInfo = localStorage.getItem(USER_INFO)\n\n  if (userInfo) {\n    return JSON.parse(userInfo)\n  } else {\n    return {\n      __typename: 'User',\n      id: null,\n      firstName: null,\n      lastName: null,\n      email: null\n    }\n  }\n}\n\nexport const withCurrentUser = WrappedComponent => {\n  return compose(\n    graphql(CURRENT_USER_QUERY, {\n      props: ({ data: { currentUser } }) => ({\n        currentUser\n      })\n    })\n  )(WrappedComponent)\n}\n\nexport const listenForOpenSignUpDialog = callback => {\n  window.addEventListener('openSignUpModal', () => callback())\n}\nexport const openSignUpDialog = () => {\n  const event = new Event('openSignUpModal')\n  window.dispatchEvent(event)\n}\n\nexport const shortName = user => {\n  if (user && user.firstName && user.lastName) {\n    return `${user.firstName} ${user.lastName[0]}.`\n  }\n\n  return ''\n}\n\nexport const isCurrentUser = (currentUserId, userId) => currentUserId === userId\n","import React from 'react'\nimport { isUserLoggedIn, openSignUpDialog } from '../../utils/userUtils'\n\nimport '../shared/button.css'\nimport './signup.css'\n\nconst SignUpSection = () => {\n  const renderSignUp = () => {\n    return (\n      <div>\n        <button\n          className=\"form-button homepage-signup-button\"\n          onClick={() => openSignUpDialog()}\n        >\n          Get Started\n        </button>\n      </div>\n    )\n  }\n\n  return <div>{!isUserLoggedIn() && renderSignUp()}</div>\n}\n\nexport default SignUpSection\n","import React from 'react'\nimport Header from './homepage/header'\nimport ValueProp from './homepage/valueProp'\nimport SignUpSection from './homepage/signup'\n\nconst HomePage = () => {\n  return (\n    <div>\n      <Header />\n      <ValueProp />\n      <SignUpSection />\n    </div>\n  )\n}\n\nexport default HomePage\n","import { gql } from '@apollo/client'\n\nexport const GET_CITIES = gql`\n  query($limit: Int, $query: String) {\n    cities(first: $limit, query: $query) {\n      id\n      name\n      state\n    }\n  }\n`\n","import React, { useState, useEffect } from 'react'\nimport Select from 'react-select'\nimport { GET_CITIES } from '../../graphql/cityQueries'\nimport InputLabel from '@material-ui/core/InputLabel'\nimport FormControl from '@material-ui/core/FormControl'\nimport { useApolloClient } from '@apollo/client'\n\nconst style = {\n  container: {\n    position: 'relative',\n    width: '500px'\n  },\n  formControl: {\n    minWidth: '500px',\n    marginTop: '16px',\n    marginBottom: '8px',\n    height: '16px'\n  }\n}\n\nconst CityFormField = ({\n  onCitySelected,\n  isMulti,\n  fieldLabel,\n  placeholder,\n  containerWidth,\n  containerDisplay,\n  initialValue\n}) => {\n  const client = useApolloClient()\n  const [query, setQuery] = useState('')\n  const [selectedOption, setSelectedOption] = useState(isMulti ? [] : {})\n  const [options, setOptions] = useState([])\n\n  useEffect(() => {\n    const getSuggestions = query => {\n      return client.query({\n        query: GET_CITIES,\n        variables: { limit: 10, query }\n      })\n    }\n\n    if (query && query.length >= 3) {\n      getSuggestions(query).then(({ data }) => {\n        setOptions(\n          data.cities.map(city => {\n            return { value: city.id, label: `${city.name}, ${city.state}` }\n          })\n        )\n      })\n    } else {\n      setOptions([])\n    }\n  }, [query, client])\n\n  useEffect(() => {\n    if (initialValue && Array.isArray(initialValue) && initialValue.length) {\n      setSelectedOption(\n        initialValue.map(city => {\n          return { value: city.id, label: `${city.name}, ${city.state}` }\n        })\n      )\n    }\n  }, [initialValue])\n\n  const handleInputChange = text => {\n    setQuery(text)\n  }\n\n  const handleOptionChange = option => {\n    setSelectedOption(option)\n    onCitySelected(option)\n  }\n\n  const hasOptions = () => options && options.length\n\n  return (\n    <div\n      style={{\n        ...style.container,\n        width: containerWidth ? containerWidth : '500px',\n        display: containerDisplay ? containerDisplay : 'block'\n      }}\n    >\n      <FormControl style={style.formControl}>\n        <InputLabel shrink={true} htmlFor=\"age-simple\">\n          {fieldLabel ? fieldLabel : 'City'}\n        </InputLabel>\n      </FormControl>\n      <Select\n        value={selectedOption}\n        defaultValue={null}\n        onChange={handleOptionChange}\n        options={options}\n        onInputChange={handleInputChange}\n        placeholder={placeholder ? placeholder : 'Type in name of city'}\n        isClearable={true}\n        isMulti={!!isMulti}\n        menuIsOpen={hasOptions()}\n        escapeClearsValue={true}\n      />\n    </div>\n  )\n}\n\nexport default CityFormField\n","import React, { useState } from 'react'\nimport { useQuery } from '@apollo/client'\nimport InputLabel from '@material-ui/core/InputLabel'\nimport Select from '@material-ui/core/Select'\nimport MenuItem from '@material-ui/core/MenuItem'\nimport FormControl from '@material-ui/core/FormControl'\n\nimport { GET_VENUE_TYPES } from '../../graphql/venueQueries'\n\nconst style = {\n  formControl: {\n    minWidth: '500px',\n    marginTop: '16px',\n    marginBottom: '8px'\n  }\n}\n\nconst VenueTypeFormField = ({ onVenueTypeSelected }) => {\n  const [selectedOption, setSelectedOption] = useState('')\n  const { loading, error, data } = useQuery(GET_VENUE_TYPES)\n\n  const handleOptionChange = option => {\n    setSelectedOption(option)\n    onVenueTypeSelected(option)\n  }\n\n  if (loading) return 'Loading...'\n  if (error) return `Error! ${error.message}`\n\n  return (\n    <FormControl style={style.formControl}>\n      <InputLabel htmlFor=\"age-simple\">Venue Type</InputLabel>\n      <Select\n        value={selectedOption}\n        onChange={event => handleOptionChange(event.target.value)}\n        inputProps={{\n          name: 'type',\n          id: 'venue-type'\n        }}\n      >\n        {data.venueTypes.map(venueType => (\n          <MenuItem key={venueType.id} value={venueType.id}>\n            {venueType.name}\n          </MenuItem>\n        ))}\n      </Select>\n    </FormControl>\n  )\n}\n\nexport default VenueTypeFormField\n","import React from 'react'\nimport {\n  DirectionsRun,\n  DirectionsWalk,\n  NearMe,\n  Restaurant,\n  Museum,\n  Nature,\n  NaturePeople,\n  Pets\n} from '@material-ui/icons'\n\nexport const venueMapLink = venue => {\n  const address = `${venue.streetAddress}, ${venue.city}, ${venue.state} ${venue.zipcode}`\n  return `https://maps.google.com/?q=${encodeURIComponent(address)}`\n}\n\nexport const venueTypeIcon = (venue, cssClass) => {\n  let venueIconComponent\n\n  switch (venue.venueTypes[0].name) {\n    case 'restaurant':\n      venueIconComponent = <Restaurant className={cssClass} />\n      break\n    case 'museum':\n      venueIconComponent = <Museum className={cssClass} />\n      break\n    case 'zoo':\n      venueIconComponent = <Pets className={cssClass} />\n      break\n    case 'hiking trail':\n      venueIconComponent = <DirectionsWalk className={cssClass} />\n      break\n    case 'outdoor park':\n      venueIconComponent = <Nature className={cssClass} />\n      break\n    case 'camp site':\n      venueIconComponent = <NaturePeople className={cssClass} />\n      break\n    case 'outdoor playground':\n      venueIconComponent = <DirectionsRun className={cssClass} />\n      break\n    default:\n      venueIconComponent = <NearMe className={cssClass} />\n  }\n\n  return venueIconComponent\n}\n\nexport const venueHeaderImage = venue => venue.venueTypes[0].image\n\nexport const venuePrimaryTypeName = venue => venue.venueTypes[0].name || 'venue'\n\nexport const venueCityState = venue => `${venue.city}, ${venue.state}`\n\nexport const venueAddress = (venue, separator = ', ', format = '') => {\n  if (venue) {\n    if (format === 'raw') {\n      return `${venue.streetAddress}${separator}${venueCityState(venue)} ${\n        venue.zipcode\n      }`\n    } else {\n      return (\n        <span>\n          {venue.streetAddress}\n          {separator}\n          {venueCityState(venue)} {venue.zipcode}\n        </span>\n      )\n    }\n  }\n\n  return ''\n}\n","import React, { createContext, useCallback, useState } from 'react'\n\nexport const SessionNotificationContext = createContext({\n  notifications: [],\n  addNotification: () => {},\n  clearNotifications: () => {}\n})\n\nexport const SessionNotificationProvider = ({ children }) => {\n  const [notifications, setNotifications] = useState([])\n\n  const contextValue = {\n    notifications: notifications,\n    addNotification: useCallback(\n      (message, type) =>\n        setNotifications(notifications.concat({ message, type })),\n      [notifications]\n    ),\n    clearNotifications: useCallback(() => setNotifications([]), [])\n  }\n\n  return (\n    <SessionNotificationContext.Provider value={contextValue}>\n      {children}\n    </SessionNotificationContext.Provider>\n  )\n}\n","import { useContext } from 'react'\nimport { SessionNotificationContext } from '../providers/sessionNotificationProvider'\n\nexport const SessionNotificationType = {\n  MESSAGE: 1,\n  WARNING: 2,\n  ERROR: 3\n}\n\nconst useSessionNotification = () => {\n  const { notifications, addNotification, clearNotifications } = useContext(\n    SessionNotificationContext\n  )\n\n  return { notifications, addNotification, clearNotifications }\n}\n\nexport default useSessionNotification\n","import { gql } from '@apollo/client'\n\nexport const CREATE_VENUE_MUTATION = gql`\n  mutation CreateVenueMutation(\n    $name: String!\n    $streetAddress: String!\n    $zipcode: Int!\n    $cityId: Int!\n    $typeId: Int!\n  ) {\n    createVenue(\n      name: $name\n      streetAddress: $streetAddress\n      zipcode: $zipcode\n      city: { id: $cityId }\n      venueType: { id: $typeId }\n    ) {\n      id\n      name\n      streetAddress\n      venueTypes {\n        name\n      }\n    }\n  }\n`\n\nexport const CREATE_USER_VENUE_FAVORITE_MUTATION = gql`\n  mutation CreateUserVenueFavorite($venueId: Int!) {\n    createUserVenueFavorite(venueId: $venueId) {\n      favorites\n      favoriteByCurrentUser\n    }\n  }\n`\n\nexport const DELETE_USER_VENUE_FAVORITE_MUTATION = gql`\n  mutation DeleteUserVenueFavorite($venueId: Int!) {\n    deleteUserVenueFavorite(venueId: $venueId) {\n      favorites\n      favoriteByCurrentUser\n    }\n  }\n`\n","import { GET_VENUE_BY_SLUG } from './venueQueries'\n\nexport const updateVenueStatsCache = (store, venueSlug, venueStats) => {\n  if (store.data.data.ROOT_QUERY[`venueBySlug({\"slug\":\"${venueSlug}\"})`]) {\n    let data = store.readQuery({\n      query: GET_VENUE_BY_SLUG,\n      variables: { venueSlug }\n    })\n\n    store.writeQuery({\n      query: GET_VENUE_BY_SLUG,\n      variables: { venueSlug },\n      data: {\n        ...data,\n        venueBySlug: { ...data.venueBySlug, venueStats: { ...venueStats } }\n      }\n    })\n  }\n}\n","import React, { useEffect, useCallback, useState } from 'react'\nimport { useHistory } from 'react-router-dom'\nimport { venueAddress, venuePrimaryTypeName } from '../../../utils/venueUtils'\nimport { useLazyQuery, useMutation } from '@apollo/client'\nimport useSessionNotification, {\n  SessionNotificationType\n} from '../../../hooks/useSessionNotification'\nimport {\n  GET_SIMILAR_VENUES_BY_NAME,\n  GET_VENUES_FOR_CURRENT_USER\n} from '../../../graphql/venueQueries'\n\nimport './similarVenueByName.css'\nimport Routes from '../../../routes'\nimport { Link as RouterLink } from 'react-router-dom'\nimport { CREATE_USER_VENUE_FAVORITE_MUTATION } from '../../../graphql/venueMutations'\nimport { updateVenueStatsCache } from '../../../graphql/venueCache'\n\nconst SimilarVenuesByName = ({ venue }) => {\n  const history = useHistory()\n  const { addNotification } = useSessionNotification()\n  const [selectedSimilarVenue, setSelectedSimilarVenue] = useState(null)\n  const [getSimilarVenuesByName, similarVenuesByNameResults] = useLazyQuery(\n    GET_SIMILAR_VENUES_BY_NAME\n  )\n\n  const refetchQueries = [\n    {\n      query: GET_VENUES_FOR_CURRENT_USER\n    }\n  ]\n\n  const [addFavoriteVenue] = useMutation(CREATE_USER_VENUE_FAVORITE_MUTATION, {\n    onError(error) {\n      console.log('error', error)\n    },\n    update: (store, { data: { createUserVenueFavorite } }) => {\n      updateVenueStatsCache(\n        store,\n        selectedSimilarVenue.slug,\n        createUserVenueFavorite\n      )\n\n      addNotification(\n        `${selectedSimilarVenue.name} has been added to your favorites`,\n        SessionNotificationType.MESSAGE\n      )\n      history.push(Routes.venuePath(selectedSimilarVenue.slug))\n    },\n    refetchQueries\n  })\n\n  const getSimilarVenuesCallback = useCallback(\n    (name, city) => {\n      return getSimilarVenuesByName({\n        variables: {\n          name: name,\n          cityId: city && city.id ? city.id : null,\n          limit: 5\n        }\n      })\n    },\n    [getSimilarVenuesByName]\n  )\n\n  useEffect(() => {\n    if (venue.name && venue.name.length >= 3) {\n      getSimilarVenuesCallback(venue.name, venue.city)\n    }\n  }, [venue.name, venue.city, getSimilarVenuesCallback])\n\n  const addFavoriteCallback = useCallback(\n    venue => {\n      return addFavoriteVenue({\n        variables: {\n          venueId: venue.id\n        }\n      })\n    },\n    [addFavoriteVenue]\n  )\n\n  useEffect(() => {\n    if (selectedSimilarVenue) {\n      addFavoriteCallback(selectedSimilarVenue)\n    }\n  }, [selectedSimilarVenue, addFavoriteCallback])\n\n  if (\n    !similarVenuesByNameResults.data ||\n    !similarVenuesByNameResults.data.similarVenuesByName ||\n    !similarVenuesByNameResults.data.similarVenuesByName.length\n  )\n    return null\n\n  return (\n    <div className=\"similarVenueByName\">\n      <div className=\"similarVenueByNameTitle\">\n        Are you adding{' '}\n        {similarVenuesByNameResults.data.similarVenuesByName.length > 1\n          ? 'one of these destinations'\n          : 'this destination'}\n        ?\n      </div>\n      <div className=\"similarVenueByNameItems\">\n        {similarVenuesByNameResults.data.similarVenuesByName.map(\n          similarVenue => (\n            <div key={similarVenue.id} className=\"similarVenueByNameItem\">\n              <RouterLink\n                to={Routes.venuePath(similarVenue.slug)}\n                target=\"_blank\"\n                key={similarVenue.id}\n                className=\"similarVenueByNameItemName\"\n              >\n                {similarVenue.name}\n              </RouterLink>\n              <div className=\"similarVenueByNameItemType\">\n                {venuePrimaryTypeName(similarVenue)}\n              </div>\n              {venueAddress(similarVenue, <br />)}\n              <div className=\"similarAddToFavoriteButtonContainer\">\n                <button\n                  className=\"similarAddToFavoriteButton\"\n                  onClick={() => setSelectedSimilarVenue(similarVenue)}\n                >\n                  Add to Favorites\n                </button>\n              </div>\n            </div>\n          )\n        )}\n      </div>\n    </div>\n  )\n}\n\nexport default SimilarVenuesByName\n","import React, { useState } from 'react'\nimport { useMutation } from '@apollo/client'\n\nimport Dialog from '@material-ui/core/Dialog'\nimport DialogContent from '@material-ui/core/DialogContent'\nimport DialogTitle from '@material-ui/core/DialogTitle'\nimport DialogContentText from '@material-ui/core/DialogContentText'\nimport TextField from '@material-ui/core/TextField'\nimport NumberFormat from 'react-number-format'\nimport AppBar from '@material-ui/core/AppBar'\nimport Toolbar from '@material-ui/core/Toolbar'\nimport CloseIcon from '@material-ui/icons/Close'\nimport IconButton from '@material-ui/core/IconButton'\n\nimport CityFormField from './cityFormField'\nimport VenueTypeFormField from './venueTypeFormField'\nimport SimilarVenuesByName from './addVenueDialog/similarVenuesByName'\nimport { CREATE_VENUE_MUTATION } from '../../graphql/venueMutations'\nimport Button from '@material-ui/core/Button'\n\nimport { validateVenue } from '../../utils/validationUtils'\n\nimport { GET_VENUES_FOR_CURRENT_USER } from '../../graphql/venueQueries'\n\nconst USER_ACTION_TEXT = 'Please enter information about a place you enjoyed.'\nconst USER_ACTION_TEXT_ERROR = 'Please enter valid venue information'\n\nconst style = {\n  appBar: {\n    position: 'relative'\n  },\n  title: {\n    margin: '0 auto'\n  },\n  body: {\n    margin: '0 auto'\n  },\n  input: {\n    minWidth: '500px'\n  }\n}\n\nconst venueStub = {\n  name: '',\n  type: {\n    id: null\n  },\n  streetAddress: '',\n  zipcode: '',\n  lat: '',\n  lng: '',\n  city: {}\n}\n\nconst AddVenueDialog = ({ open, toggleDialog, onCreatedVenue }) => {\n  const [addVenue] = useMutation(CREATE_VENUE_MUTATION, {\n    onError(error) {\n      console.log('error', error)\n    },\n    onCompleted(data) {\n      onCreatedVenue()\n    },\n    refetchQueries: [\n      {\n        query: GET_VENUES_FOR_CURRENT_USER\n      }\n    ],\n    awaitRefetchQueries: true\n  })\n\n  const [newVenue, setNewVenue] = useState({ ...venueStub })\n  const [userActionText, setUserActionText] = useState(USER_ACTION_TEXT)\n\n  const onCitySelected = city => {\n    setNewVenue({\n      ...newVenue,\n      city: city && city.value ? { id: city.value } : {}\n    })\n  }\n\n  const onVenueTypeSelected = venueTypeId => {\n    setNewVenue({ ...newVenue, type: { id: venueTypeId } })\n  }\n\n  const handleChange = name => event => {\n    setNewVenue({ ...newVenue, [name]: event.target.value })\n  }\n\n  const onSubmit = () => {\n    if (validateVenue(newVenue)) {\n      addVenue({\n        variables: {\n          name: newVenue.name,\n          typeId: newVenue.type.id,\n          streetAddress: newVenue.streetAddress,\n          zipcode: parseInt(newVenue.zipcode),\n          cityId: newVenue.city.id\n        }\n      }).then(response => {\n        setNewVenue({ ...venueStub })\n        toggleDialog()\n      })\n    } else {\n      setUserActionText(USER_ACTION_TEXT_ERROR)\n    }\n  }\n\n  return (\n    <Dialog\n      open={open}\n      onClose={toggleDialog}\n      fullScreen={true}\n      aria-labelledby=\"form-dialog-title\"\n    >\n      <AppBar style={style.appBar}>\n        <Toolbar>\n          <IconButton\n            edge=\"start\"\n            color=\"inherit\"\n            onClick={toggleDialog}\n            aria-label=\"close\"\n          >\n            <CloseIcon />\n          </IconButton>\n        </Toolbar>\n      </AppBar>\n      <DialogTitle style={style.title}>Add New Destination</DialogTitle>\n      <DialogContent style={style.body}>\n        <DialogContentText>{userActionText}</DialogContentText>\n        <TextField\n          id=\"venue-name\"\n          label=\"Venue name\"\n          value={newVenue.name}\n          onChange={handleChange('name')}\n          margin=\"normal\"\n          style={style.input}\n        />\n        <br />\n        <VenueTypeFormField onVenueTypeSelected={onVenueTypeSelected} />\n        <br />\n        <TextField\n          id=\"venue-street-address\"\n          name=\"street-address\"\n          label=\"Street address\"\n          value={newVenue.streetAddress}\n          onChange={handleChange('streetAddress')}\n          margin=\"normal\"\n          autoComplete=\"shipping street-address\"\n          style={style.input}\n        />\n        <CityFormField onCitySelected={onCitySelected} />\n\n        <NumberFormat\n          customInput={TextField}\n          id=\"venue-zipcode\"\n          name=\"zipcode\"\n          label=\"Zipcode\"\n          value={newVenue.zipcode}\n          onChange={handleChange('zipcode')}\n          margin=\"normal\"\n          style={style.input}\n          autoComplete=\"postal-code\"\n          format=\"#####\"\n        />\n        <SimilarVenuesByName venue={newVenue} />\n        <div>\n          <Button color=\"primary\" onClick={onSubmit}>\n            Create venue\n          </Button>\n        </div>\n      </DialogContent>\n    </Dialog>\n  )\n}\n\nexport default AddVenueDialog\n","export const validateVenue = ({ name, type, streetAddress, city, zipcode }) => {\n  let valid = {\n    name: false,\n    type: false,\n    streetAddress: false,\n    city: false,\n    zipcode: false\n  }\n\n  if (name && name.length >= 3) {\n    valid.name = true\n  }\n\n  if (type && type.id) {\n    valid.type = true\n  }\n\n  if (streetAddress && streetAddress.length >= 2) {\n    valid.streetAddress = true\n  }\n\n  if (city && city.id) {\n    valid.city = true\n  }\n\n  if (zipcode && !isNaN(parseInt(zipcode))) {\n    valid.zipcode = true\n  }\n\n  return Object.values(valid).indexOf(false) === -1\n}\n\nexport const isValueInObject = (object, value) =>\n  Object.values(object).includes(value)\n","import React from 'react'\nimport AppBar from \"@material-ui/core/AppBar/AppBar\"\nimport Tabs from \"@material-ui/core/Tabs\"\nimport Tab from \"@material-ui/core/Tab\"\nimport { withStyles } from \"@material-ui/core\"\n\nconst styles = {\n\tappBar: {\n\t\tboxShadow: \"none\",\n\t\tfloat: \"left\",\n\t\twidth: '300px',\n\t},\n\ttabIndicator: {\n\t\tbackgroundColor: '#ffffff',\n\t},\n}\n\nconst VenueTypeTabs = ({ classes, venues, venueTypeFilter, onSetVenueTypeFilter }) => {\n\tconst handleVenueTypeClick = (e, value) => {\n\t\tonSetVenueTypeFilter(value)\n\t}\n\n\tconst getVenueTypes = venues => {\n\t\tlet results = {}\n\n\t\tfor (let x = 0; x < venues.length; x++) {\n\t\t\tif ((venues[x].venueTypes && venues[x].venueTypes.length)) {\n\t\t\t\tif (results[venues[x].venueTypes[0].name]) {\n\t\t\t\t\tresults[venues[x].venueTypes[0].name].venues.push(venues[x])\n\t\t\t\t} else {\n\t\t\t\t\tresults[venues[x].venueTypes[0].name] = {\n\t\t\t\t\t\ttype: {\n\t\t\t\t\t\t\tid: venues[x].venueTypes[0].id,\n\t\t\t\t\t\t\tname: venues[x].venueTypes[0].name,\n\t\t\t\t\t\t},\n\t\t\t\t\t\tvenues: [venues[x]],\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn Object.keys(results)\n\t}\n\n\treturn (\n\t\t<React.Fragment>\n\t\t\t<AppBar position=\"static\" className={classes.appBar}>\n\t\t\t\t<Tabs value={venueTypeFilter}\n\t\t\t\t\t\t\tonChange={handleVenueTypeClick}\n\t\t\t\t\t\t\tclasses={{ indicator: classes.tabIndicator }}\n\t\t\t\t\t\t\torientation=\"vertical\"\n\t\t\t\t\t\t\tvariant=\"scrollable\"\n\t\t\t\t\t\t\tscrollButtons=\"auto\">\n\t\t\t\t\t<Tab label='all' value='all'/>\n\t\t\t\t\t{getVenueTypes(venues).sort().map((type, index) => (\n\t\t\t\t\t\t<Tab label={type} value={type} key={index}/>\n\t\t\t\t\t))}\n\t\t\t\t</Tabs>\n\t\t\t</AppBar>\n\t\t</React.Fragment>\n\t)\n}\n\nexport default withStyles(styles)(VenueTypeTabs)","import React from 'react'\nimport { withStyles } from '@material-ui/core/styles'\n\nimport {\n  venueMapLink,\n  venueTypeIcon,\n  venueCityState\n} from '../../utils/venueUtils'\nimport { Link as RouterLink } from 'react-router-dom'\nimport Routes from '../../routes'\nimport { useMutation } from '@apollo/client'\nimport { DELETE_USER_VENUE_FAVORITE_MUTATION } from '../../graphql/venueMutations'\nimport {\n  GET_VENUE_BY_SLUG,\n  GET_VENUES_FOR_CURRENT_USER\n} from '../../graphql/venueQueries'\n\nconst styles = {\n  '@global': {\n    '.venueItem': {\n      border: '1px solid #eee',\n      borderRadius: '8px',\n      marginTop: '5px',\n      marginBottom: '5px',\n      // backgroundColor: '#f6f6f6',\n      padding: '15px',\n      width: '49%',\n      display: 'inline-block',\n      '&:nth-child(odd)': {\n        marginRight: '10px'\n      }\n    },\n    '.venueItemTitle': {\n      display: 'block',\n      fontSize: '18px',\n      fontWeight: 500,\n      lineHeight: 1.6,\n      color: '#333333',\n      textDecoration: 'none',\n      '&:hover': {\n        textDecoration: 'underline'\n      }\n    },\n    '.venueItemDescription': {},\n    '.venueItemTypeBadge': {\n      display: 'inline-block',\n      padding: '1px 5px',\n      backgroundColor: '#2196f3',\n      color: '#fff',\n      borderRadius: '3px',\n      height: '22px'\n    },\n    '.venueItemTypeBadgeText': {\n      marginLeft: '20px',\n      marginTop: '3px',\n      textTransform: 'uppercase',\n      fontSize: '11px',\n      fontWeight: 600,\n      minWidth: '75px',\n      textAlign: 'center'\n    },\n    '.venueItemLocation': {\n      textTransform: 'uppercase',\n      fontSize: '11px',\n      fontWeight: 600,\n      textDecoration: 'none',\n      float: 'right',\n      marginTop: '4px',\n      color: '#666'\n    },\n    '.venueIcon': {\n      float: 'left',\n      width: '15px',\n      height: 'auto',\n      marginRight: '5px',\n      position: 'relative',\n      top: '2px'\n    },\n    '.venueUnlike': {\n      float: 'right'\n    }\n  }\n}\n\nconst VenueListItem = props => {\n  const { venue, showDeleteFavoriteButton, onDeleteFavoriteCallback } = props\n\n  const [deleteFavorite] = useMutation(DELETE_USER_VENUE_FAVORITE_MUTATION, {\n    onError(error) {\n      console.log('error', error)\n    },\n    update: (store, { data: { deleteUserVenueFavorite } }) => {\n      updateFavoriteStats(store, deleteUserVenueFavorite)\n    },\n    onCompleted: () => {\n      onDeleteFavoriteCallback()\n    },\n    refetchQueries: [\n      {\n        query: GET_VENUES_FOR_CURRENT_USER\n      }\n    ],\n    awaitRefetchQueries: true\n  })\n\n  const updateFavoriteStats = (store, venueStats) => {\n    try {\n      let data = store.readQuery({\n        query: GET_VENUE_BY_SLUG,\n        variables: { venueSlug: venue.slug }\n      })\n\n      data.venueBySlug.venueStats = venueStats\n\n      store.writeQuery({\n        query: GET_VENUE_BY_SLUG,\n        variables: { venueSlug: venue.slug },\n        data\n      })\n    } catch (e) {}\n  }\n\n  const onDeleteFavorite = () =>\n    deleteFavorite({\n      variables: {\n        venueId: venue.id\n      }\n    })\n\n  return (\n    <div className=\"venueItem\">\n      {showDeleteFavoriteButton && (\n        <button\n          onClick={() => {\n            onDeleteFavorite()\n          }}\n          className=\"venueUnlike\"\n        >\n          Unlike\n        </button>\n      )}\n\n      <RouterLink to={Routes.venuePath(venue.slug)} className=\"venueItemTitle\">\n        {venue.name}\n      </RouterLink>\n      <div className=\"venueItemDescription\">\n        <div className=\"venueItemTypeBadge\">\n          {venueTypeIcon(venue, 'venueIcon')}\n          <div className=\"venueItemTypeBadgeText\">\n            {venue.venueTypes && venue.venueTypes.length\n              ? `${venue.venueTypes[0].name}`\n              : ''}\n          </div>\n        </div>\n        <a\n          href={venueMapLink(venue)}\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n          className=\"venueItemLocation\"\n        >\n          {venueCityState(venue)}\n        </a>\n      </div>\n    </div>\n  )\n}\n\nexport default withStyles(styles)(VenueListItem)\n","import React, { Fragment, useEffect, useState } from 'react'\nimport VenueTypeTabs from './venueTypeTabs'\nimport VenueListItem from './venueListItem'\nimport { withStyles } from '@material-ui/core/styles'\nimport { GET_VENUES_FOR_CURRENT_USER } from '../../graphql/venueQueries'\nimport { useApolloClient } from '@apollo/client'\n\nconst styles = {\n  '@global': {\n    '.venueList': {\n      marginLeft: '320px'\n    }\n  }\n}\n\nconst VenueList = ({\n  currentDashboardSection,\n  isFavoritesDashboardSection,\n  externalTriggerVenueRefresh\n}) => {\n  const client = useApolloClient()\n  const [venueTypeFilter, setVenueTypeFilter] = useState('all')\n  const [venues, setVenues] = useState([])\n  const [triggerVenueRefresh, setTriggerVenueRefresh] = useState(true)\n\n  useEffect(() => {\n    const getVenueData = () => {\n      client\n        .query({\n          query: GET_VENUES_FOR_CURRENT_USER\n        })\n        .then(({ data }) => {\n          setVenues(\n            isFavoritesDashboardSection\n              ? data.me.favoriteVenues\n              : data.me.venues\n          )\n        })\n    }\n\n    getVenueData()\n    setVenueTypeFilter('all')\n  }, [\n    currentDashboardSection,\n    triggerVenueRefresh,\n    externalTriggerVenueRefresh,\n    isFavoritesDashboardSection,\n    client\n  ])\n\n  const onDeleteFavorite = () => {\n    setTriggerVenueRefresh(!triggerVenueRefresh)\n  }\n\n  return (\n    <Fragment>\n      <VenueTypeTabs\n        venues={venues}\n        onSetVenueTypeFilter={setVenueTypeFilter}\n        venueTypeFilter={venueTypeFilter}\n      ></VenueTypeTabs>\n      <div className=\"venueList\">\n        {venues\n          .filter(\n            venue =>\n              venueTypeFilter === 'all' ||\n              venue.venueTypes[0].name === venueTypeFilter\n          )\n          .map(venue => (\n            <VenueListItem\n              key={venue.id}\n              venue={venue}\n              showDeleteFavoriteButton={isFavoritesDashboardSection}\n              onDeleteFavoriteCallback={onDeleteFavorite}\n            />\n          ))}\n      </div>\n    </Fragment>\n  )\n}\n\nexport default withStyles(styles)(VenueList)\n","import { gql } from '@apollo/client'\n\nexport const SIGNUP_MUTATION = gql`\n  mutation SignupMutation(\n    $email: String!\n    $password: String!\n    $firstName: String!\n    $lastName: String!\n  ) {\n    signup(\n      email: $email\n      password: $password\n      firstName: $firstName\n      lastName: $lastName\n    ) {\n      token\n      user {\n        id\n        firstName\n        lastName\n        email\n      }\n    }\n  }\n`\n\nexport const LOGIN_MUTATION = gql`\n  mutation LoginMutation($email: String!, $password: String!) {\n    login(email: $email, password: $password) {\n      token\n      user {\n        id\n        firstName\n        lastName\n        email\n      }\n    }\n  }\n`\n\nexport const UPDATE_CURRENT_USER_FEED_CONFIG_MUTATION = gql`\n  mutation UpdateCurrentUserFeedConfigMutation(\n    $cityIds: String\n    $venueTypeIds: String\n  ) {\n    updateUserFeedConfig(cityIds: $cityIds, venueTypeIds: $venueTypeIds) {\n      cityIds\n      venueTypeIds\n    }\n  }\n`\n\nexport const CREATE_USER_FOLLOWER_MUTATION = gql`\n  mutation CreateUserFollower($publicId: String!) {\n    createUserFollower(publicId: $publicId) {\n      followedByCurrentUser\n      followers\n      followees\n    }\n  }\n`\n\nexport const DELETE_USER_FOLLOWER_MUTATION = gql`\n  mutation DeleteUserFollower($publicId: String!) {\n    deleteUserFollower(publicId: $publicId) {\n      followedByCurrentUser\n      followers\n      followees\n    }\n  }\n`\n","export const localDateTime = timestamp => {\n  return new Date(timestamp).toLocaleString()\n}\n\nexport const sinceCreated = (timestamp, prefix = 'on', format = null) => {\n  const then = new Date(timestamp)\n  const now = new Date()\n\n  const diffSeconds = (now.getTime() - then.getTime()) / 1000\n\n  let response\n\n  if (diffSeconds <= 60) {\n    response = 'now'\n  } else if (diffSeconds < 90) {\n    response = Math.round(diffSeconds / 60) + ' minute ago'\n  } else if (diffSeconds <= 3600) {\n    response = Math.round(diffSeconds / 60) + ' minutes ago'\n  } else if (diffSeconds < 5400) {\n    response = Math.round(diffSeconds / 3600) + ' hour ago'\n  } else if (diffSeconds <= 86400) {\n    response = Math.round(diffSeconds / 3600) + ' hours ago'\n  } else if (format) {\n    response = then.toLocaleTimeString('en-US', format)\n  } else if (prefix === 'at') {\n    response =\n      prefix +\n      ' ' +\n      then.toLocaleTimeString('en-US', {\n        year: 'numeric',\n        month: 'short',\n        day: 'numeric',\n        hour: '2-digit',\n        minute: '2-digit'\n      })\n  } else {\n    response =\n      prefix +\n      ' ' +\n      then.toLocaleDateString('en-US', {\n        year: 'numeric',\n        month: 'short',\n        day: 'numeric'\n      })\n  }\n\n  return response\n}\n\nexport const messageTimeStampFormat = {\n  year: 'numeric',\n  month: 'short',\n  day: 'numeric',\n  hour: 'numeric',\n  minute: '2-digit'\n}\n","import React, { Fragment } from 'react'\nimport { withStyles } from '@material-ui/core/styles'\nimport { sinceCreated } from '../../utils/dateUtils'\nimport { shortName } from '../../utils/userUtils'\nimport Routes from '../../routes'\nimport { Link as RouterLink } from 'react-router-dom'\nimport { venueCityState } from '../../utils/venueUtils'\n\nconst styles = {\n  '@global': {\n    '.feedItem': {\n      borderBottom: '1px solid #eee',\n      marginTop: '5px',\n      marginBottom: '5px',\n      padding: '15px'\n    },\n    '.feedItemTitle': {\n      fontWeight: 600,\n      color: '#000',\n      textDecoration: 'none',\n      fontSize: '15px',\n      '&:hover': {\n        textDecoration: 'underline'\n      }\n    },\n    '.feedItemSubtitle': {\n      fontSize: '12px'\n    }\n  }\n}\n\nconst FeedItem = ({ venue }) => {\n  return (\n    <div className=\"feedItem\">\n      <RouterLink to={Routes.venuePath(venue.slug)} className=\"feedItemTitle\">\n        {venue.name}\n      </RouterLink>\n      <div className=\"feedItemSubtitle\">\n        in {venueCityState(venue)}\n        {venue.creator && (\n          <Fragment>\n            <br />\n            added {sinceCreated(venue.createdAt)} by &nbsp;\n            <RouterLink to={Routes.userProfilePath(venue.creator.id)}>\n              {shortName(venue.creator)}\n            </RouterLink>\n          </Fragment>\n        )}\n      </div>\n    </div>\n  )\n}\n\nexport default withStyles(styles)(FeedItem)\n","import React, { useState, useEffect } from 'react'\nimport Select from 'react-select'\nimport InputLabel from '@material-ui/core/InputLabel'\nimport FormControl from '@material-ui/core/FormControl'\nimport { GET_VENUE_TYPES } from '../../graphql/venueQueries'\nimport { useApolloClient } from '@apollo/client'\n\nconst style = {\n  container: {\n    position: 'relative',\n    width: '350px',\n    display: 'inline-block'\n  },\n  formControl: {\n    minWidth: '500px',\n    marginTop: '16px',\n    marginBottom: '8px',\n    height: '16px'\n  }\n}\n\nconst VenueTypeMultiFormField = ({ initialValue, onVenueTypeSelected }) => {\n  const client = useApolloClient()\n  const [selectedOption, setSelectedOption] = useState([])\n  const [options, setOptions] = useState([])\n\n  useEffect(() => {\n    client\n      .query({\n        query: GET_VENUE_TYPES\n      })\n      .then(({ data }) => {\n        setOptions(\n          data.venueTypes.map(venueType => {\n            return { value: venueType.id, label: venueType.name }\n          })\n        )\n      })\n  }, [client])\n\n  useEffect(() => {\n    if (options && options.length && initialValue) {\n      const defaultVenueTypeIds = initialValue.split(',').map(venueTypeId => {\n        return parseInt(venueTypeId)\n      })\n\n      setSelectedOption(\n        options.filter(venueType =>\n          defaultVenueTypeIds.includes(venueType.value)\n        )\n      )\n    }\n  }, [options, initialValue])\n\n  const handleOptionChange = option => {\n    setSelectedOption(option)\n    onVenueTypeSelected(option)\n  }\n\n  return (\n    <div style={style.container}>\n      <FormControl style={style.formControl}>\n        <InputLabel shrink={true} htmlFor=\"age-simple\">\n          Venue type\n        </InputLabel>\n      </FormControl>\n      <Select\n        value={selectedOption}\n        defaultValue={null}\n        onChange={handleOptionChange}\n        options={options}\n        placeholder=\"Select venue type\"\n        isClearable={true}\n        isMulti={true}\n        isSearchable={false}\n        escapeClearsValue={true}\n      />\n    </div>\n  )\n}\n\nexport default VenueTypeMultiFormField\n","import React, { useState, useEffect } from 'react'\nimport CityFormField from './cityFormField'\nimport VenueTypeMultiFormField from './venueTypeMultiFormField'\n\nconst FeedConfigurator = ({\n  feedConfiguration,\n  onFeedConfigurationUpdated\n}) => {\n  const [cityIds, setCityIds] = useState()\n  const [venueTypeIds, setVenueTypeIds] = useState()\n\n  useEffect(() => {\n    setCityIds(feedConfiguration.cityIds)\n    setVenueTypeIds(feedConfiguration.venueTypeIds)\n  }, [feedConfiguration])\n\n  const onCitySelected = cities => {\n    const ids = cities ? cities.map(city => city.value).join(',') : null\n    setCityIds(ids)\n    onFeedConfigurationUpdated({ cityIds: ids, venueTypeIds })\n  }\n\n  const onVenueTypeSelected = venueTypes => {\n    const ids = venueTypes\n      ? venueTypes.map(venueType => venueType.value).join(',')\n      : null\n    setVenueTypeIds(ids)\n    onFeedConfigurationUpdated({ venueTypeIds: ids, cityIds })\n  }\n\n  return (\n    <div>\n      <CityFormField\n        onCitySelected={onCitySelected}\n        fieldLabel=\"Filter feed by city\"\n        placeholder=\"e.g.: San Francisco, CA\"\n        isMulti={true}\n        containerWidth=\"350px\"\n        containerDisplay=\"inline-block\"\n        initialValue={feedConfiguration.cityDetails}\n      ></CityFormField>\n      <div\n        style={{ display: 'inline-block', width: '30px', height: '20px' }}\n      ></div>\n      <VenueTypeMultiFormField\n        initialValue={venueTypeIds}\n        onVenueTypeSelected={onVenueTypeSelected}\n      ></VenueTypeMultiFormField>\n    </div>\n  )\n}\n\nexport default FeedConfigurator\n","import React, { useEffect, useState } from 'react'\nimport { useMutation, useApolloClient } from '@apollo/client'\nimport { withStyles } from '@material-ui/core/styles'\nimport { GET_FEED_VENUES } from '../../graphql/venueQueries'\nimport { CURRENT_USER_FEED_CONFIG_QUERY } from '../../graphql/userQueries'\nimport { UPDATE_CURRENT_USER_FEED_CONFIG_MUTATION } from '../../graphql/userMutations'\n\nimport FeedItem from './feedItem'\nimport FeedConfigurator from './feedConfigurator'\n\nconst styles = {\n  '@global': {\n    '.feedContainer': {\n      maxWidth: '50%',\n      minWidth: '400px'\n    }\n  }\n}\n\nconst Feed = () => {\n  const client = useApolloClient()\n  const [feedVenues, setFeedVenues] = useState([])\n  const [feedConfiguration, setFeedConfiguration] = useState({\n    cityIds: null,\n    venueTypeIds: null,\n    sort: 'DESC',\n    first: 25,\n    init: false\n  })\n\n  const [updateCurrentUserFeedConfigMutation] = useMutation(\n    UPDATE_CURRENT_USER_FEED_CONFIG_MUTATION\n  )\n\n  useEffect(() => {\n    client\n      .query({\n        query: CURRENT_USER_FEED_CONFIG_QUERY\n      })\n      .then(({ data }) => {\n        setFeedConfiguration({\n          init: true,\n          sort: 'DESC',\n          first: 25,\n          ...data.userFeedConfig\n        })\n      })\n  }, [client])\n\n  useEffect(() => {\n    if (feedConfiguration.init) {\n      client\n        .query({\n          query: GET_FEED_VENUES,\n          variables: {\n            ...feedConfiguration\n          }\n        })\n        .then(({ data }) => {\n          setFeedVenues(data.venues)\n        })\n    }\n  }, [client, feedConfiguration])\n\n  const onFeedConfigurationUpdated = newFeedConfiguration => {\n    if (newFeedConfiguration) {\n      setFeedConfiguration({ ...newFeedConfiguration, init: true })\n    }\n\n    updateCurrentUserFeedConfigMutation({\n      variables: {\n        cityIds: newFeedConfiguration.cityIds,\n        venueTypeIds: newFeedConfiguration.venueTypeIds\n      }\n    })\n  }\n\n  return (\n    <div>\n      <FeedConfigurator\n        feedConfiguration={feedConfiguration}\n        onFeedConfigurationUpdated={onFeedConfigurationUpdated}\n      ></FeedConfigurator>\n      <div className=\"feedContainer\">\n        {feedVenues.map(venue => (\n          <FeedItem key={venue.id} venue={venue}></FeedItem>\n        ))}\n      </div>\n    </div>\n  )\n}\n\nexport default withStyles(styles)(Feed)\n","import React from 'react'\n\nconst withPageTemplate = WrappedComponent =>\n  class NewComponent extends React.Component {\n    render() {\n      return (\n        <div className=\"mainContainer\">\n          <div className=\"mainContent\">\n            <WrappedComponent {...this.props}></WrappedComponent>\n          </div>\n        </div>\n      )\n    }\n  }\n\nexport default withPageTemplate\n","import React, { useEffect, useState } from 'react'\nimport { Link as RouterLink } from 'react-router-dom'\nimport { useMutation, useQuery } from '@apollo/client'\nimport { GET_FOLLOWERS_FOR_CURRENT_USER } from '../../graphql/userQueries'\nimport { shortName } from '../../utils/userUtils'\n\nimport './followers/followers.css'\nimport Routes from '../../routes'\nimport { DELETE_USER_FOLLOWER_MUTATION } from '../../graphql/userMutations'\n\nconst Followers = () => {\n  const [followData, setFollowData] = useState(null)\n\n  const { loading, error, data } = useQuery(GET_FOLLOWERS_FOR_CURRENT_USER)\n\n  useEffect(() => {\n    if (data) {\n      setFollowData(data.me)\n    }\n  }, [data])\n\n  const refetchQueries = [\n    {\n      query: GET_FOLLOWERS_FOR_CURRENT_USER\n    }\n  ]\n\n  const [deleteUserFollower] = useMutation(DELETE_USER_FOLLOWER_MUTATION, {\n    onError(error) {\n      console.log('error', error)\n    },\n    refetchQueries\n  })\n\n  const onUnfollowClick = publicId => {\n    return deleteUserFollower({ variables: { publicId } })\n  }\n\n  if (!followData || !followData.stats) return null\n  if (loading) return null\n  if (error) return `Error! ${error}`\n\n  return (\n    <div>\n      <div className=\"followers-container\">\n        <div className=\"followers-list-container\">\n          <div className=\"followers-list-header\">\n            Followees ({followData.stats.followees})\n          </div>\n          {followData.followees.map(followee => (\n            <div key={followee.id} className=\"followers-list-item\">\n              <RouterLink to={Routes.userProfilePath(followee.id)}>\n                {shortName(followee)}\n              </RouterLink>\n              <button\n                onClick={() => onUnfollowClick(followee.publicId)}\n                className=\"inlineButton\"\n              >\n                Un-follow\n              </button>\n            </div>\n          ))}\n        </div>\n        <div className=\"followers-list-container\">\n          <div className=\"followers-list-header\">\n            Followers ({followData.stats.followers})\n          </div>\n          {followData.followers.map(follower => (\n            <div key={follower.id} className=\"followers-list-item\">\n              <RouterLink to={Routes.userProfilePath(follower.id)}>\n                {shortName(follower)}\n              </RouterLink>\n            </div>\n          ))}\n        </div>\n      </div>\n    </div>\n  )\n}\n\nexport default Followers\n","import React, { useState } from 'react'\nimport { withStyles } from '@material-ui/core/styles'\nimport { Link as RouterLink } from 'react-router-dom'\nimport Button from '@material-ui/core/Button'\nimport { Add } from '@material-ui/icons'\nimport Routes from '../routes'\n\nimport AddVenueDialog from './dashboard/addVenueDialog'\nimport VenueList from './dashboard/venueList'\nimport Feed from './dashboard/feed'\nimport withPageTemplate from './shared/withPageTemplate'\nimport Followers from './dashboard/followers'\n\nconst DASHBOARD_SECTION = {\n  FEED: 'feed',\n  MY_DESTINATIONS: 'my-destinations',\n  FAVORITES: 'favorites',\n  FOLLOWERS: 'followers'\n}\n\nconst styles = {\n  '@global': {\n    '.sectionHeader': {\n      marginBottom: '30px',\n      display: 'flex'\n    },\n    '.sectionHeaderTitle': {\n      flexGrow: 1,\n      maxWidth: '200px',\n      cursor: 'pointer',\n      textDecoration: 'none',\n      color: '#666',\n      textAlign: 'center',\n      textTransform: 'uppercase',\n      borderRadius: '8px',\n      margin: '0px 10px',\n      fontSize: '14px',\n      fontWeight: 600,\n      lineHeight: 2.5,\n      letterSpacing: '1.3px',\n      border: '1px solid #eee'\n    },\n    '.sectionHeaderTitleSelected': {\n      backgroundColor: '#f9f8f8'\n    },\n    '.venueList': {\n      marginLeft: '320px'\n    }\n  }\n}\n\nconst DashboardPage = ({ match }) => {\n  const currentDashboardSection = Routes.validatePageSection(\n    match.params.section,\n    DASHBOARD_SECTION,\n    DASHBOARD_SECTION.FEED\n  )\n\n  const [dialogOpen, setDialogOpen] = useState(false)\n  const [\n    externalTriggerVenueRefresh,\n    setExternalTriggerVenueRefresh\n  ] = useState(true)\n\n  const toggleDialog = () => {\n    setDialogOpen(!dialogOpen)\n  }\n\n  const renderDashboardSection = (text, dashboardSection) => {\n    return (\n      <RouterLink\n        to={Routes.dashboardPath(dashboardSection)}\n        className={`sectionHeaderTitle ${\n          currentDashboardSection === dashboardSection\n            ? 'sectionHeaderTitleSelected'\n            : ''\n        }`}\n      >\n        {text}\n      </RouterLink>\n    )\n  }\n\n  const renderDashboardSectionContent = () => {\n    switch (currentDashboardSection) {\n      case DASHBOARD_SECTION.FEED:\n        return <Feed></Feed>\n      case DASHBOARD_SECTION.MY_DESTINATIONS:\n        return (\n          <VenueList\n            currentDashboardSection={currentDashboardSection}\n            isFavoritesDashboardSection={false}\n            externalTriggerVenueRefresh={externalTriggerVenueRefresh}\n          ></VenueList>\n        )\n      case DASHBOARD_SECTION.FAVORITES:\n        return (\n          <VenueList\n            currentDashboardSection={currentDashboardSection}\n            isFavoritesDashboardSection={true}\n            externalTriggerVenueRefresh={externalTriggerVenueRefresh}\n          ></VenueList>\n        )\n      case DASHBOARD_SECTION.FOLLOWERS:\n        return <Followers></Followers>\n      default:\n        return <Feed></Feed>\n    }\n  }\n\n  const onCreatedVenue = () =>\n    setExternalTriggerVenueRefresh(!externalTriggerVenueRefresh)\n\n  return (\n    <React.Fragment>\n      <div className=\"sectionHeader\">\n        {renderDashboardSection('Feed', DASHBOARD_SECTION.FEED)}\n        {renderDashboardSection(\n          'My destinations',\n          DASHBOARD_SECTION.MY_DESTINATIONS\n        )}\n        {renderDashboardSection('Favorites', DASHBOARD_SECTION.FAVORITES)}\n        {renderDashboardSection('Followers', DASHBOARD_SECTION.FOLLOWERS)}\n        <Button\n          variant=\"outlined\"\n          style={{ marginLeft: 'auto' }}\n          onClick={toggleDialog}\n        >\n          <Add />\n          Add Destination\n        </Button>\n        <AddVenueDialog\n          open={dialogOpen}\n          toggleDialog={toggleDialog}\n          onCreatedVenue={onCreatedVenue}\n        />\n      </div>\n\n      {renderDashboardSectionContent()}\n    </React.Fragment>\n  )\n}\n\nexport default withStyles(styles)(withPageTemplate(DashboardPage))\n","import React from 'react'\nimport Typography from '@material-ui/core/Typography'\nimport { headerStyles } from '../../utils/styleUtils'\nimport { venueHeaderImage } from '../../utils/venueUtils'\n\nconst VenueHeader = props => {\n  const { venue } = props\n  const headerStyle = headerStyles(`${venueHeaderImage(venue)}`, '300px')\n\n  return (\n    <div style={headerStyle.container}>\n      <Typography variant=\"h2\" style={headerStyle.headerText}>\n        <strong>{venue.name}</strong>\n      </Typography>\n    </div>\n  )\n}\n\nexport default VenueHeader\n","import React, { useState, useEffect } from 'react'\nimport { GET_SIMILAR_VENUES_IN_RADIUS } from '../../graphql/venueQueries'\nimport '../shared/sidebarModule.css'\nimport { Link as RouterLink } from 'react-router-dom'\nimport Routes from '../../routes'\nimport { useApolloClient } from '@apollo/client'\n\nconst SimilarVenues = ({ venue }) => {\n  const client = useApolloClient()\n  const [similarVenues, setSimilarVenues] = useState([])\n  useEffect(() => {\n    client\n      .query({\n        query: GET_SIMILAR_VENUES_IN_RADIUS,\n        variables: { venueId: venue.id, limit: 5, radius: 15 }\n      })\n      .then(({ data }) => {\n        setSimilarVenues(data.similarVenues)\n      })\n  }, [venue, client])\n\n  return (\n    <div\n      className=\"sidebar-module\"\n      style={{\n        display: similarVenues && similarVenues.length ? 'block' : 'none'\n      }}\n    >\n      <h3>Similar places near by</h3>\n      <div className=\"sidebar-module-body\">\n        {similarVenues &&\n          similarVenues.map(venue => (\n            <div key={venue.id}>\n              <RouterLink to={Routes.venuePath(venue.slug)}>\n                {venue.name}\n              </RouterLink>\n            </div>\n          ))}\n      </div>\n    </div>\n  )\n}\n\nexport default SimilarVenues\n","import React from 'react'\nimport '../shared/sidebarModule.css'\nimport { venueAddress } from '../../utils/venueUtils'\nimport { GOOGLE_DIRECTIONS_URL } from '../../utils/urlUtils'\n\nconst LocationInfo = ({ venue }) => {\n  return (\n    <div className=\"sidebar-module\">\n      <h3>Location</h3>\n      <div className=\"sidebar-module-body\">\n        <a\n          href={`${GOOGLE_DIRECTIONS_URL}${encodeURIComponent(\n            venueAddress(venue, ',', 'raw')\n          )}`}\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n        >\n          {venueAddress(venue, <br />)}\n        </a>\n      </div>\n    </div>\n  )\n}\n\nexport default LocationInfo\n","import React from 'react'\nimport { useMutation } from '@apollo/client'\nimport {\n  CREATE_USER_VENUE_FAVORITE_MUTATION,\n  DELETE_USER_VENUE_FAVORITE_MUTATION\n} from '../../graphql/venueMutations'\nimport { GET_VENUES_FOR_CURRENT_USER } from '../../graphql/venueQueries'\n\nimport { updateVenueStatsCache } from '../../graphql/venueCache'\n\nconst FavoriteButton = ({\n  venueId,\n  venueSlug,\n  favoriteByCurrentUser,\n  onUpdateFavoritesStats\n}) => {\n  const refetchQueries = [\n    {\n      query: GET_VENUES_FOR_CURRENT_USER\n    }\n  ]\n\n  const [addFavorite] = useMutation(CREATE_USER_VENUE_FAVORITE_MUTATION, {\n    onError(error) {\n      console.log('error', error)\n    },\n    update: (store, { data: { createUserVenueFavorite } }) => {\n      updateVenueStatsCache(store, venueSlug, createUserVenueFavorite)\n      onUpdateFavoritesStats(createUserVenueFavorite)\n    },\n    refetchQueries\n  })\n\n  const [deleteFavorite] = useMutation(DELETE_USER_VENUE_FAVORITE_MUTATION, {\n    onError(error) {\n      console.log('error', error)\n    },\n    update: (store, { data: { deleteUserVenueFavorite } }) => {\n      updateVenueStatsCache(store, venueSlug, deleteUserVenueFavorite)\n      onUpdateFavoritesStats(deleteUserVenueFavorite)\n    },\n    refetchQueries\n  })\n\n  const onAddFavorite = () =>\n    addFavorite({\n      variables: {\n        venueId: venueId\n      }\n    })\n\n  const onDeleteFavorite = () =>\n    deleteFavorite({\n      variables: {\n        venueId: venueId\n      }\n    })\n\n  return (\n    <React.Fragment>\n      {favoriteByCurrentUser ? (\n        <span>\n          &#9733;&nbsp;\n          <button\n            onClick={e => {\n              e.preventDefault()\n              onDeleteFavorite()\n            }}\n          >\n            {' '}\n            Unlike\n          </button>\n        </span>\n      ) : (\n        <button\n          href=\"#\"\n          onClick={e => {\n            e.preventDefault()\n            onAddFavorite()\n          }}\n        >\n          Like\n        </button>\n      )}\n    </React.Fragment>\n  )\n}\n\nexport default FavoriteButton\n","import React, { useEffect, useState } from 'react'\nimport Typography from '@material-ui/core/Typography'\nimport NumberFormat from 'react-number-format'\nimport pluralize from 'pluralize'\nimport { GET_VENUE_BY_SLUG } from '../graphql/venueQueries'\n\nimport VenueHeader from './venue/header'\nimport SimilarVenues from './venue/similarVenues'\nimport { venuePrimaryTypeName } from '../utils/venueUtils'\nimport { isUserLoggedIn } from '../utils/userUtils'\nimport LocationInfo from './venue/locationInfo'\nimport FavoriteButton from './venue/favoriteButton'\nimport { useQuery } from '@apollo/client'\n\nconst pageStyle = {\n  sectionHeader: {\n    marginBottom: '15px'\n  },\n  columnWrapper: {\n    display: 'flex'\n  },\n  mainColumn: {\n    flexGrow: 3,\n    maxWidth: '800px'\n  },\n  sideColumm: {\n    flexGrow: 1,\n    marginTop: '-20px'\n  }\n}\n\nconst VenuePage = ({ match }) => {\n  const venueSlug = match.params.venueSlug\n  const [venue, setVenue] = useState(null)\n  const [venueTypeName, setVenueTypeName] = useState('')\n\n  const { loading, error, data } = useQuery(GET_VENUE_BY_SLUG, {\n    variables: { venueSlug }\n  })\n\n  useEffect(() => {\n    if (data) {\n      setVenue(data.venueBySlug)\n      setVenueTypeName(venuePrimaryTypeName(data.venueBySlug))\n    }\n  }, [data])\n\n  const onUpdateFavoritesStats = venueStats => {\n    setVenue({ ...venue, venueStats: { ...venueStats } })\n  }\n\n  if (loading) return null\n  if (error) return `Error! ${error}`\n\n  if (!venueSlug) {\n    return <div>Venue not found.</div>\n  } else {\n    return (\n      venue && (\n        <div>\n          <VenueHeader venue={venue} />\n          <div className=\"mainContainer\">\n            <div className=\"mainContent\">\n              <Typography variant=\"h5\" style={pageStyle.sectionHeader}>\n                {venue.name}\n              </Typography>\n              <div style={pageStyle.columnWrapper}>\n                <div style={pageStyle.mainColumn}>\n                  <div>\n                    Liked by{' '}\n                    <strong>\n                      <NumberFormat\n                        value={venue.venueStats.favorites}\n                        thousandSeparator={true}\n                        displayType={'text'}\n                      />{' '}\n                      {pluralize('person', venue.venueStats.favorites)}\n                    </strong>\n                    . &nbsp;\n                    {isUserLoggedIn() && (\n                      <FavoriteButton\n                        venueId={venue.id}\n                        venueSlug={venueSlug}\n                        favoriteByCurrentUser={\n                          venue.venueStats.favoriteByCurrentUser\n                        }\n                        onUpdateFavoritesStats={onUpdateFavoritesStats}\n                      />\n                    )}\n                  </div>\n                  <br />\n                  {venue.description && <span>{venue.description}</span>}\n                  This {venueTypeName} is located in {venue.city}, {venue.state}\n                  .\n                </div>\n                <div style={pageStyle.sideColumm}>\n                  <LocationInfo venue={venue} />\n                  <SimilarVenues venue={venue} />\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n      )\n    )\n  }\n}\n\nexport default VenuePage\n","import { createMuiTheme } from '@material-ui/core/styles'\nimport blue from '@material-ui/core/colors/blue'\n\nexport default createMuiTheme({\n  palette: {\n    primary: {\n      main: blue[500]\n    },\n    background: { default: '#efefef' }\n  },\n  typography: {\n    useNextVariants: true\n  }\n})\n","import React, { Component } from 'react'\nimport { withRouter } from 'react-router'\n\nimport { setUserInfo } from '../../utils/userUtils'\nimport Routes from '../../routes'\nimport { Mutation } from '@apollo/client/react/components'\nimport { SIGNUP_MUTATION, LOGIN_MUTATION } from '../../graphql/userMutations'\nimport { CURRENT_USER_QUERY } from '../../graphql/userQueries'\n\nimport TextField from '@material-ui/core/TextField'\nimport Button from '@material-ui/core/Button'\n\nimport { withStyles } from '@material-ui/core/styles'\nimport Dialog from '@material-ui/core/Dialog'\nimport DialogActions from '@material-ui/core/DialogActions'\nimport DialogContent from '@material-ui/core/DialogContent'\nimport DialogContentText from '@material-ui/core/DialogContentText'\nimport DialogTitle from '@material-ui/core/DialogTitle'\n\nconst styles = {\n  dialogMainContent: {\n    display: 'flex',\n    justifyContent: 'center',\n    flexDirection: 'column'\n  },\n  dialogMainError: {\n    textAlign: 'center'\n  }\n}\n\nclass LoginDialog extends Component {\n  state = {\n    login: this.props.login !== undefined ? this.props.login : true, // switch between Login and SignUp\n    email: '',\n    password: '',\n    firstName: '',\n    lastName: '',\n    errorMessage: null\n  }\n\n  componentDidUpdate(prevProps) {\n    if (prevProps.open !== this.props.open) {\n      this.setState({ errorMessage: null })\n    }\n\n    if (prevProps.login !== this.props.login) {\n      this.setState({ login: this.props.login })\n    }\n  }\n\n  render() {\n    const {\n      login,\n      email,\n      password,\n      firstName,\n      lastName,\n      errorMessage\n    } = this.state\n    const { classes } = this.props\n    return (\n      <Dialog\n        open={this.props.open}\n        onClose={this.props.toggleDialog}\n        maxWidth=\"sm\"\n        fullWidth={true}\n        aria-labelledby=\"form-dialog-title\"\n      >\n        <DialogTitle id=\"login-dialog-title\">\n          {login ? 'Login' : 'Sign Up'}\n        </DialogTitle>\n        <DialogContent>\n          {errorMessage && (\n            <DialogContentText className={classes.dialogMainError}>\n              {errorMessage}\n            </DialogContentText>\n          )}\n          <div className={classes.dialogMainContent}>\n            {!login && (\n              <span>\n                <TextField\n                  id=\"firstName\"\n                  label=\"First name\"\n                  error={!!errorMessage}\n                  value={firstName}\n                  onChange={e => this.setState({ firstName: e.target.value })}\n                  margin=\"normal\"\n                  fullWidth\n                />\n                <TextField\n                  id=\"lastName\"\n                  label=\"Last name\"\n                  error={!!errorMessage}\n                  value={lastName}\n                  onChange={e => this.setState({ lastName: e.target.value })}\n                  margin=\"normal\"\n                  fullWidth\n                />\n              </span>\n            )}\n            <TextField\n              id=\"email\"\n              label=\"Email\"\n              error={!!errorMessage}\n              value={email}\n              onChange={e => this.setState({ email: e.target.value })}\n              margin=\"normal\"\n              fullWidth\n            />\n            <TextField\n              id=\"password\"\n              label=\"Password\"\n              error={!!errorMessage}\n              type=\"password\"\n              autoComplete=\"current-password\"\n              onChange={e => this.setState({ password: e.target.value })}\n              margin=\"normal\"\n              fullWidth\n            />\n          </div>\n        </DialogContent>\n        <DialogActions>\n          <Button\n            onClick={() => this.setState({ login: !login, errorMessage: null })}\n            color=\"primary\"\n            style={{ marginRight: 'auto' }}\n          >\n            {login ? 'need to create an account?' : 'already have an account?'}\n          </Button>\n\n          <Button onClick={this.props.toggleDialog} color=\"primary\">\n            Cancel\n          </Button>\n          <Mutation\n            mutation={login ? LOGIN_MUTATION : SIGNUP_MUTATION}\n            variables={{ email, password, firstName, lastName }}\n            update={(cache, { data }) =>\n              this._update(cache, login ? data.login : data.signup)\n            }\n            onCompleted={data => this._confirm(data)}\n            onError={error => this._error(error)}\n          >\n            {mutation => (\n              <Button color=\"primary\" onClick={mutation}>\n                {login ? 'login' : 'create account'}\n              </Button>\n            )}\n          </Mutation>\n        </DialogActions>\n      </Dialog>\n    )\n  }\n\n  _update = async (cache, info) => {\n    cache.writeQuery({\n      query: CURRENT_USER_QUERY,\n      data: {\n        currentUser: {\n          ...info.user,\n          token: info.token\n        }\n      }\n    })\n  }\n\n  _confirm = async data => {\n    this.state.error = null\n\n    const { token, user } = this.state.login ? data.login : data.signup\n    this._saveUserData(token, user)\n\n    document.location = Routes.dashboardPath('')\n  }\n\n  _saveUserData = (token, user) => {\n    setUserInfo(token, user)\n  }\n\n  _error = async ({ graphQLErrors }) => {\n    if (\n      this.state.login &&\n      graphQLErrors &&\n      graphQLErrors[0] &&\n      graphQLErrors[0].message\n    ) {\n      this.setState({ errorMessage: graphQLErrors[0].message })\n    } else if (\n      graphQLErrors &&\n      graphQLErrors[0] &&\n      graphQLErrors[0].extensions.exception.errors[0].message\n    ) {\n      this.setState({\n        errorMessage: graphQLErrors[0].extensions.exception.errors[0].message\n      })\n    }\n  }\n}\n\nexport default withRouter(withStyles(styles)(LoginDialog))\n","import React, { useEffect, useState } from 'react'\nimport Button from '@material-ui/core/Button'\nimport { withRouter } from 'react-router'\n// import { useQuery } from '@apollo/client'\nimport {\n  isUserLoggedIn,\n  withCurrentUser,\n  listenForOpenSignUpDialog\n} from '../../utils/userUtils'\nimport LoginDialog from './loginDialog'\nimport Typography from '@material-ui/core/Typography'\n// import { CURRENT_USER_QUERY } from '../../graphql/userQueries'\n\nconst LoginButton = ({ currentUser, className }) => {\n  const [dialogOpen, setDialogOpen] = useState(false)\n  const [login, setLogin] = useState(true)\n\n  useEffect(() => {\n    listenForOpenSignUpDialog(() => {\n      this.setState({ dialogOpen: true, login: false })\n      setDialogOpen(true)\n      setLogin(false)\n    })\n  })\n\n  const toggleDialog = () => {\n    setDialogOpen(!dialogOpen)\n    setLogin(true)\n  }\n\n  const renderUserInfo = currentUser => {\n    if (currentUser && currentUser.id) {\n      return `Welcome, ${currentUser.firstName}`\n    } else {\n      return ''\n    }\n  }\n\n  // const { data } = useQuery(CURRENT_USER_QUERY)\n  // console.log('data', data)\n\n  return isUserLoggedIn() ? (\n    <Typography variant=\"button\" color=\"inherit\" className={className}>\n      {renderUserInfo(currentUser)}\n    </Typography>\n  ) : (\n    <span>\n      <Button onClick={toggleDialog} className={className} color=\"inherit\">\n        Login\n      </Button>\n      <LoginDialog\n        open={dialogOpen}\n        login={login}\n        toggleDialog={toggleDialog}\n      />\n    </span>\n  )\n}\n\nexport default withCurrentUser(withRouter(LoginButton))\n","import React, { useState } from 'react'\nimport IconButton from '@material-ui/core/IconButton'\nimport MenuIcon from '@material-ui/icons/Menu'\nimport Menu from '@material-ui/core/Menu'\nimport MenuItem from '@material-ui/core/MenuItem'\nimport { Link as RouterLink } from 'react-router-dom'\nimport Routes from '../../routes'\nimport { logoutUser, withCurrentUser } from '../../utils/userUtils'\nimport { withRouter } from 'react-router'\n\nconst AppBarMenu = ({ classes, currentUser, history }) => {\n  const [anchorEl, setAnchorEl] = useState(null)\n\n  const toggleMenu = event => {\n    anchorEl ? setAnchorEl(null) : setAnchorEl(event.currentTarget)\n  }\n\n  return (\n    <span className={classes.menuWrapper}>\n      <IconButton\n        onClick={toggleMenu}\n        className={classes.menuButton}\n        color=\"inherit\"\n        aria-label=\"Menu\"\n      >\n        <MenuIcon />\n      </IconButton>\n      <Menu\n        id=\"simple-menu\"\n        anchorEl={anchorEl}\n        open={Boolean(anchorEl)}\n        onClose={toggleMenu}\n      >\n        <MenuItem component={RouterLink} to={Routes.home} onClick={toggleMenu}>\n          Home\n        </MenuItem>\n        <MenuItem\n          component={RouterLink}\n          to={Routes.dashboardPath('')}\n          onClick={toggleMenu}\n        >\n          Dashboard\n        </MenuItem>\n        <MenuItem\n          component={RouterLink}\n          to={Routes.userProfilePath(currentUser.id)}\n          onClick={toggleMenu}\n        >\n          My profile\n        </MenuItem>\n        <MenuItem\n          onClick={() => {\n            logoutUser()\n            history.push(`/`)\n          }}\n        >\n          Logout\n        </MenuItem>\n      </Menu>\n    </span>\n  )\n}\n\nexport default withCurrentUser(withRouter(AppBarMenu))\n","import { gql } from '@apollo/client'\n\nexport const GET_MESSAGE_COUNT = gql`\n  query {\n    messageCount {\n      unread\n      read\n      archived\n      deleted\n    }\n  }\n`\n\nexport const GET_MESSAGES = gql`\n  query($status: String) {\n    messages(status: $status) {\n      id\n      body\n      status\n      messageType\n      recipient {\n        id\n        firstName\n        lastName\n      }\n      sender {\n        id\n        firstName\n        lastName\n      }\n      createdAt\n    }\n  }\n`\n\nexport const GET_CONVERSATIONALISTS = gql`\n  query {\n    conversationalists {\n      id\n      publicId\n      firstName\n      lastName\n      createdAt\n    }\n  }\n`\n\nexport const GET_CONVERSATION = gql`\n  query($conversationalistUserId: Int!) {\n    conversation(conversationalistUserId: $conversationalistUserId) {\n      id\n      body\n      status\n      messageType\n      recipient {\n        id\n        firstName\n        lastName\n      }\n      sender {\n        id\n        firstName\n        lastName\n      }\n      createdAt\n    }\n  }\n`\n","import React, { useEffect, useState } from 'react'\nimport { useQuery } from '@apollo/client'\nimport { GET_MESSAGE_COUNT } from '../../graphql/messagesQueries'\n\nconst UnreadMessagesIndicator = () => {\n  const [unreadFlag, setUnreadFlag] = useState(false)\n  const { data } = useQuery(GET_MESSAGE_COUNT, {\n    fetchPolicy: 'no-cache'\n  })\n\n  useEffect(() => {\n    if (data && data.messageCount && data.messageCount) {\n      setUnreadFlag(!!data.messageCount.unread)\n    }\n  }, [data])\n\n  return (\n    <div\n      className=\"unreadIndicator\"\n      style={{ display: `${unreadFlag ? 'block' : 'none'}` }}\n    ></div>\n  )\n}\n\nexport default UnreadMessagesIndicator\n","import React from 'react'\nimport EmailOutlinedIcon from '@material-ui/icons/EmailOutlined'\nimport IconButton from '@material-ui/core/IconButton'\n\nimport './appBarMessages.css'\nimport UnreadMessagesIndicator from './unreadMessagesIndicator'\nimport { Link as RouterLink } from 'react-router-dom'\nimport Routes from '../../routes'\n\nconst AppBarMessages = ({ classes }) => {\n  return (\n    <React.Fragment>\n      <div className=\"messagesButtonWrapper\">\n        <IconButton\n          className={classes.messagesButton}\n          color=\"inherit\"\n          aria-label=\"Messages\"\n          component={RouterLink}\n          to={Routes.messagesPath('')}\n        >\n          <EmailOutlinedIcon />\n        </IconButton>\n        <UnreadMessagesIndicator />\n      </div>\n    </React.Fragment>\n  )\n}\n\nexport default AppBarMessages\n","import React, { Component } from 'react'\n\nimport AppBar from '@material-ui/core/AppBar'\nimport Toolbar from '@material-ui/core/Toolbar'\nimport Typography from '@material-ui/core/Typography'\n\nimport LoginButton from '../components/shared/loginButton'\nimport { isUserLoggedIn, withCurrentUser } from '../utils/userUtils'\nimport { withRouter } from 'react-router'\n\nimport AppBarMenu from './appBar/appBarMenu'\nimport AppBarMessages from './appBar/appBarMessages'\n\nclass ButtonAppBar extends Component {\n  render() {\n    const { classes } = this.props\n\n    return (\n      <div className={classes.root}>\n        <AppBar\n          position=\"fixed\"\n          style={{ background: 'transparent', boxShadow: 'none' }}\n        >\n          <Toolbar variant=\"dense\" className={classes.container}>\n            <Typography\n              className={classes.logoText}\n              variant=\"button\"\n              color=\"inherit\"\n            >\n              KidTrip\n            </Typography>\n            <Typography\n              variant=\"h6\"\n              color=\"inherit\"\n              className={classes.grow}\n            ></Typography>\n\n            <LoginButton className={classes.loginButton} />\n\n            {isUserLoggedIn() && (\n              <React.Fragment>\n                <AppBarMessages classes={classes} />\n                <AppBarMenu classes={classes} />\n              </React.Fragment>\n            )}\n          </Toolbar>\n        </AppBar>\n      </div>\n    )\n  }\n}\n\nexport default withCurrentUser(withRouter(ButtonAppBar))\n","import React from 'react'\nimport { isHomepage } from '../utils/routeUtils'\nimport { withStyles } from '@material-ui/core/styles'\nimport { withRouter } from 'react-router'\nimport blueGrey from '@material-ui/core/colors/blueGrey'\n\nimport AppBar from './appBar'\n\nconst styles = {\n  root: {\n    flexGrow: 1\n  },\n  grow: {\n    flexGrow: 1\n  },\n  messagesButton: {\n    marginLeft: 3,\n    marginRight: -10\n  },\n  menuButton: {\n    marginLeft: -12,\n    marginRight: 20\n  },\n  menuWrapper: {\n    marginLeft: 15\n  }\n}\n\nconst nonHomepageStyles = {\n  ...styles,\n  container: {\n    borderBottom: '1px solid',\n    borderBottomColor: blueGrey[100],\n    backgroundColor: 'white'\n  },\n  grow: {\n    ...styles.grow,\n    color: blueGrey[500]\n  },\n  menuButton: {\n    ...styles.menuButton,\n    color: blueGrey[500]\n  },\n  messagesButton: {\n    ...styles.messagesButton,\n    color: blueGrey[500]\n  },\n  loginButton: {\n    color: blueGrey[500]\n  },\n  logoText: {\n    color: blueGrey[500]\n  }\n}\n\nconst AppBarContainer = props => {\n  const currentStyles = isHomepage(props.location) ? styles : nonHomepageStyles\n  const AppBarWithStyles = withStyles(currentStyles)(AppBar)\n  return <AppBarWithStyles />\n}\n\nexport default withRouter(AppBarContainer)\n","import React, { Fragment } from 'react'\nimport useSessionNotification from '../hooks/useSessionNotification'\n\nimport './sessionNotification.css'\n\nconst SessionNotifications = () => {\n  const { clearNotifications, notifications } = useSessionNotification()\n\n  if (!notifications || !notifications.length) return null\n\n  return (\n    <Fragment>\n      {notifications.map((notification, index) => (\n        <div key={index} className={`sessionNotification`}>\n          <div\n            className={`sessionNotificationContent sessionNotificationLevel-${notification.type}`}\n          >\n            {notification.message}\n\n            <div\n              onClick={() => clearNotifications()}\n              className=\"closeSessionNotification\"\n            >\n              &times;\n            </div>\n          </div>\n        </div>\n      ))}\n    </Fragment>\n  )\n}\n\nexport default SessionNotifications\n","import React from 'react'\nimport '../shared/sidebarModule.css'\nimport FeedItem from '../dashboard/feedItem'\n\nconst SideVenueWidget = ({ title, venues }) => {\n  return (\n    <div className=\"sidebar-module\">\n      <h3>{title}</h3>\n      <div className=\"sidebar-module-body\">\n        {venues.map(venue => (\n          <FeedItem key={venue.id} venue={venue}></FeedItem>\n        ))}\n      </div>\n    </div>\n  )\n}\n\nexport default SideVenueWidget\n","import React, { Fragment } from 'react'\nimport { useMutation } from '@apollo/client'\nimport { headerStyles } from '../../utils/styleUtils'\nimport { withCurrentUser } from '../../utils/userUtils'\nimport {\n  CREATE_USER_FOLLOWER_MUTATION,\n  DELETE_USER_FOLLOWER_MUTATION\n} from '../../graphql/userMutations'\nimport {\n  GET_FOLLOWERS_FOR_CURRENT_USER,\n  GET_USER_PROFILE_BY_PUBLIC_ID\n} from '../../graphql/userQueries'\nimport { Link as RouterLink } from 'react-router-dom'\nimport Routes from '../../routes'\nimport EmailOutlinedIcon from '@material-ui/icons/EmailOutlined'\nimport IconButton from '@material-ui/core/IconButton'\n\nconst UserProfileHeader = ({ userProfile, currentUser }) => {\n  const refetchQueries = [\n    {\n      query: GET_USER_PROFILE_BY_PUBLIC_ID,\n      variables: { publicId: userProfile.publicId }\n    },\n    {\n      query: GET_FOLLOWERS_FOR_CURRENT_USER\n    }\n  ]\n\n  const [\n    createUserFollower,\n    { loading: createUserFollowerLoading }\n  ] = useMutation(CREATE_USER_FOLLOWER_MUTATION, {\n    onError(error) {\n      console.log('error', error)\n    },\n    refetchQueries\n  })\n\n  const [\n    deleteUserFollower,\n    { loading: deleteUserFollowerLoading }\n  ] = useMutation(DELETE_USER_FOLLOWER_MUTATION, {\n    onError(error) {\n      console.log('error', error)\n    },\n    refetchQueries\n  })\n\n  const headerStyle = headerStyles(userProfile.config.headerImageUrl, '300px')\n\n  const onFollowClick = () => {\n    return createUserFollower({ variables: { publicId: userProfile.publicId } })\n  }\n\n  const onUnfollowClick = () => {\n    return deleteUserFollower({ variables: { publicId: userProfile.publicId } })\n  }\n\n  const renderFollowButton = () => {\n    if (currentUser.id === userProfile.user.id) {\n      return 'Your Profile'\n    } else if (userProfile.stats.followedByCurrentUser) {\n      if (deleteUserFollowerLoading) {\n        return <span>Loading...</span>\n      }\n\n      return (\n        <button onClick={() => onUnfollowClick()} className=\"headerUserButton\">\n          Un-follow\n        </button>\n      )\n    } else {\n      if (createUserFollowerLoading) {\n        return <span>Loading...</span>\n      }\n      return (\n        <button onClick={() => onFollowClick()} className=\"headerUserButton\">\n          Follow\n        </button>\n      )\n    }\n  }\n\n  const renderMessageButton = () => {\n    if (currentUser.id === userProfile.user.id) {\n      return null\n    } else if (userProfile.stats.followsCurrentUser) {\n      return (\n        <span>\n          &nbsp;&#183;\n          <IconButton\n            style={{ padding: '0px 5px 0px 6px' }}\n            color=\"inherit\"\n            aria-label=\"Compose message\"\n            component={RouterLink}\n            to={Routes.messagesPath(userProfile.user.id)}\n          >\n            <EmailOutlinedIcon />\n          </IconButton>\n        </span>\n      )\n    }\n\n    return null\n  }\n\n  return (\n    <div style={{ ...headerStyle.container, borderRadius: '8px' }}>\n      <div className=\"headerUserInfo\">\n        <div className=\"headerUserInfoName\">\n          {userProfile.user.firstName}\n          {userProfile.user.lastName && userProfile.user.lastName.length && (\n            <Fragment>&nbsp;{userProfile.user.lastName[0]}</Fragment>\n          )}\n          .\n        </div>\n        <div className=\"headerUserInfoStats\">\n          <div>\n            <span>{userProfile.stats.created} places added</span>\n            &nbsp;&#183;&nbsp;\n            <span>{userProfile.stats.favorited} places liked</span>\n          </div>\n          <div>\n            <span>{userProfile.stats.followees} following</span>\n            &nbsp;&#183;&nbsp;\n            <span>{userProfile.stats.followers} followers</span>\n            &nbsp;&#183;&nbsp;\n            {renderFollowButton()}\n            {renderMessageButton()}\n          </div>\n        </div>\n      </div>\n    </div>\n  )\n}\n\nexport default withCurrentUser(UserProfileHeader)\n","import React, { useEffect, useState } from 'react'\nimport withPageTemplate from './shared/withPageTemplate'\nimport { useQuery } from '@apollo/client'\nimport { GET_USER_PROFILE_BY_PUBLIC_ID } from '../graphql/userQueries'\nimport SideVenueWidget from './userProfile/sideVenueWidget'\n\nimport './userProfile/userProfile.css'\nimport UserProfileHeader from './userProfile/userProfileHeader'\n\nconst UserProfilePage = ({ match }) => {\n  const publicId = match.params.userId\n  const [userProfile, setUserProfile] = useState(null)\n  const { loading, error, data } = useQuery(GET_USER_PROFILE_BY_PUBLIC_ID, {\n    variables: { publicId }\n    // fetchPolicy: 'no-cache'\n  })\n\n  useEffect(() => {\n    if (data) {\n      setUserProfile(data.userProfile)\n    }\n  }, [data])\n\n  if (loading) return null\n  if (error) return `Error! ${error}`\n\n  if (!publicId) {\n    return <div>User profile not found.</div>\n  } else {\n    if (userProfile) {\n      return (\n        <div>\n          <UserProfileHeader userProfile={userProfile}></UserProfileHeader>\n          <div className=\"contentContainer\">\n            <div className=\"contentContainerMain\">More to come...</div>\n            <div className=\"contentContainerSide\">\n              {userProfile.recentAddedVenues &&\n                userProfile.recentAddedVenues.length && (\n                  <SideVenueWidget\n                    title=\"Recently added\"\n                    venues={userProfile.recentAddedVenues}\n                  />\n                )}\n              {userProfile.recentFavoriteVenues &&\n                userProfile.recentFavoriteVenues.length && (\n                  <SideVenueWidget\n                    title=\"Recently liked\"\n                    venues={userProfile.recentFavoriteVenues}\n                  />\n                )}\n            </div>\n          </div>\n        </div>\n      )\n    } else return false\n  }\n}\n\nexport default withPageTemplate(UserProfilePage)\n","import { gql } from '@apollo/client'\n\nexport const UPDATE_CONVERSATION_MUTATION = gql`\n  mutation UpdateConversationMutation(\n    $conversationalistUserId: Int!\n    $status: String!\n  ) {\n    updateConversation(\n      conversationalistUserId: $conversationalistUserId\n      status: $status\n    ) {\n      id\n      body\n      status\n      messageType\n      recipient {\n        id\n        firstName\n        lastName\n      }\n      sender {\n        id\n        firstName\n        lastName\n      }\n      createdAt\n    }\n  }\n`\n\nexport const CREATE_MESSAGE_MUTATION = gql`\n  mutation CreateMessage(\n    $conversationalistUserId: Int!\n    $messageType: String!\n    $body: String!\n  ) {\n    createMessage(\n      conversationalistUserId: $conversationalistUserId\n      messageType: $messageType\n      body: $body\n    ) {\n      id\n      body\n      status\n      messageType\n      recipient {\n        id\n      }\n      sender {\n        id\n      }\n    }\n  }\n`\n","import React from 'react'\nimport { shortName, isCurrentUser } from '../../utils/userUtils'\nimport { sinceCreated, messageTimeStampFormat } from '../../utils/dateUtils'\n\nconst Message = ({ message, currentUser }) => {\n  return (\n    <div\n      className={`message ${\n        isCurrentUser(currentUser.id, message.sender.id)\n          ? 'fromCurrentUser'\n          : ''\n      }`}\n    >\n      <div className=\"messageContainer\">\n        <div className={`messageSender ${message.status}`}>\n          {shortName(message.sender)}\n        </div>\n        {message.body}\n      </div>\n      <div className=\"messageTimestamp\">\n        {sinceCreated(message.createdAt, null, messageTimeStampFormat)}{' '}\n      </div>\n    </div>\n  )\n}\n\nexport default Message\n","import React, { useEffect, useRef, useState } from 'react'\nimport { useMutation } from '@apollo/client'\n\nimport TextField from '@material-ui/core/TextField'\nimport Button from '@material-ui/core/Button'\nimport { makeStyles } from '@material-ui/core/styles'\nimport SendIcon from '@material-ui/icons/Send'\nimport { CREATE_MESSAGE_MUTATION } from '../../graphql/messagesMutations'\n\nconst useStyles = makeStyles(theme => ({\n  main: {\n    display: 'flex'\n  },\n  button: {\n    margin: theme.spacing(1),\n    marginRight: '0px',\n    maxHeight: '36px'\n  }\n}))\n\nconst ComposeMessage = ({ conversationalistUserId, onMessageCreated }) => {\n  const [message, setMessage] = useState()\n  const classes = useStyles()\n  const composeEndRef = useRef(null)\n\n  const [createMessage] = useMutation(CREATE_MESSAGE_MUTATION, {\n    onError(error) {\n      console.log('error', error)\n    },\n    onCompleted: data => {\n      setMessage('')\n      onMessageCreated()\n    }\n  })\n\n  useEffect(() => {\n    if (composeEndRef.current) {\n      composeEndRef.current.focus()\n    }\n  })\n\n  const onSendMessage = () => {\n    if (message && message.length > 2) {\n      return createMessage({\n        variables: {\n          conversationalistUserId,\n          messageType: 'direct',\n          body: message\n        }\n      })\n    }\n  }\n\n  if (conversationalistUserId) {\n    return (\n      <div className={classes.main}>\n        <TextField\n          id=\"standard-multiline-flexible\"\n          label=\"Type message\"\n          multiline\n          rowsMax={5}\n          value={message}\n          onChange={e => setMessage(e.target.value)}\n          fullWidth\n          inputRef={composeEndRef}\n        />\n\n        <Button\n          variant=\"contained\"\n          color=\"primary\"\n          className={classes.button}\n          endIcon={<SendIcon />}\n          onClick={() => onSendMessage()}\n        >\n          Send\n        </Button>\n      </div>\n    )\n  }\n\n  return null\n}\n\nexport default ComposeMessage\n","import React, { useEffect, useRef, useState } from 'react'\nimport withPageTemplate from './shared/withPageTemplate'\nimport { useLazyQuery, useMutation, useQuery } from '@apollo/client'\nimport {\n  GET_CONVERSATIONALISTS,\n  GET_CONVERSATION\n} from '../graphql/messagesQueries'\nimport { shortName, withCurrentUser } from '../utils/userUtils'\nimport { decodeUserId } from '../utils/routeUtils'\nimport { sinceCreated } from '../utils/dateUtils'\n\nimport './messages/messages.css'\nimport Routes from '../routes'\nimport { Link as RouterLink } from 'react-router-dom'\nimport { UPDATE_CONVERSATION_MUTATION } from '../graphql/messagesMutations'\n\nimport Message from './messages/message'\nimport ComposeMessage from './messages/composeMessage'\nimport { GET_USER_PROFILE_BY_PUBLIC_ID } from '../graphql/userQueries'\n\nconst MessagesPage = ({ match, currentUser }) => {\n  const [conversationalistUserId, setConversationalistUserId] = useState(null)\n  const [conversationalists, setConversationalists] = useState([])\n  const [currentConversation, setCurrentConversation] = useState([])\n\n  const messagesEndRef = useRef(null)\n\n  const { loading, error } = useQuery(GET_CONVERSATIONALISTS, {\n    fetchPolicy: 'network-only',\n    onCompleted: data => {\n      if (data && data.conversationalists) {\n        setConversationalists(data.conversationalists)\n\n        if (isNewConversationalist(data.conversationalists)) {\n          getUserProfile({ variables: { publicId: match.params.publicId } })\n        }\n      }\n    }\n  })\n\n  const [getConversation] = useLazyQuery(GET_CONVERSATION, {\n    fetchPolicy: 'no-cache',\n    onCompleted: data => {\n      setCurrentConversation(data.conversation)\n      markConversationAsRead(data.conversation)\n    }\n  })\n\n  const [getUserProfile] = useLazyQuery(GET_USER_PROFILE_BY_PUBLIC_ID, {\n    onCompleted: data => {\n      if (data && data.userProfile && data.userProfile.user) {\n        setConversationalists(\n          [\n            {\n              ...data.userProfile.user,\n              id: parseInt(data.userProfile.user.id),\n              createdAt: new Date()\n            }\n          ].concat(conversationalists)\n        )\n      }\n    }\n  })\n\n  const [updateConversation] = useMutation(UPDATE_CONVERSATION_MUTATION, {\n    onError(error) {\n      console.log('error', error)\n    },\n    onCompleted: data => {\n      setCurrentConversation(data.updateConversation)\n    }\n  })\n\n  // mark messages as read after 3 seconds\n  const markConversationAsRead = conversation => {\n    if (\n      conversation &&\n      conversation.filter(\n        message =>\n          message.status === 'unread' &&\n          parseInt(message.sender.id) === conversationalistUserId\n      ).length\n    ) {\n      setTimeout(() => {\n        return updateConversation({\n          variables: { conversationalistUserId, status: 'read' }\n        })\n      }, 3000)\n    }\n  }\n\n  // update conversationalist based on routing change and load respective conversation\n  useEffect(() => {\n    const tempUserId = match.params.publicId\n      ? decodeUserId(match.params.publicId)\n      : null\n    setConversationalistUserId(tempUserId)\n\n    if (tempUserId) {\n      getConversation({ variables: { conversationalistUserId: tempUserId } })\n    }\n  }, [match.params.publicId, getConversation])\n\n  // scroll long list of messages to latest message at the bottom of container\n  useEffect(() => {\n    scrollToBottom()\n  }, [currentConversation])\n\n  const scrollToBottom = () => {\n    messagesEndRef.current?.scrollIntoView({ behavior: 'smooth' })\n  }\n\n  const isNewConversationalist = conversationalists =>\n    !conversationalists.filter(\n      conversationalist => conversationalist.id === conversationalistUserId\n    ).length\n\n  if (loading) return null\n  if (error) return `Error! ${error}`\n\n  return (\n    <div className=\"conversations\">\n      <div className=\"conversationalists\">\n        {conversationalists.map(conversationalist => (\n          <RouterLink\n            to={Routes.messagesPath(conversationalist.id)}\n            key={conversationalist.id}\n            className={`conversationalist ${\n              conversationalistUserId === conversationalist.id ? 'active' : ''\n            }`}\n          >\n            <div>{shortName(conversationalist)}</div>\n            <div>{sinceCreated(conversationalist.createdAt, 'at')}</div>\n          </RouterLink>\n        ))}\n      </div>\n      <div className=\"conversation\">\n        <div className=\"messages\">\n          {currentConversation && currentConversation.length ? (\n            currentConversation.map(message => (\n              <Message\n                message={message}\n                currentUser={currentUser}\n                key={message.id}\n              />\n            ))\n          ) : (\n            <div className=\"noMessages\">\n              <div>No messages</div>\n            </div>\n          )}\n          <div ref={messagesEndRef} />\n        </div>\n        <ComposeMessage\n          conversationalistUserId={conversationalistUserId}\n          onMessageCreated={() => {\n            getConversation({\n              variables: { conversationalistUserId: conversationalistUserId }\n            })\n          }}\n        />\n      </div>\n    </div>\n  )\n}\n\nexport default withCurrentUser(withPageTemplate(MessagesPage))\n","import React, { Component } from 'react'\nimport { Switch, Route } from 'react-router-dom'\nimport { withRouter } from 'react-router'\nimport Routes from './routes'\nimport { isHomepage } from './utils/routeUtils'\n\nimport HomePage from './components/homePage'\nimport DashboardPage from './components/dashboardPage'\nimport VenuePage from './components/venuePage'\n\nimport CssBaseline from '@material-ui/core/CssBaseline'\nimport { MuiThemeProvider, withStyles } from '@material-ui/core/styles'\nimport theme from './theme'\nimport AppBar from './layout/appBarContainer'\nimport SessionNotifications from './layout/sessionNotifications'\nimport UserProfilePage from './components/userProfilePage'\nimport MessagesPage from './components/messagesPage'\nimport { SessionNotificationProvider } from './providers/sessionNotificationProvider'\n\nimport './components/shared/inlineButton.css'\n\nconst styles = {\n  '@global': {\n    body: {\n      fontFamily: 'Roboto, Helvetica, Arial, sans-serif',\n      fontWeight: 400\n    },\n    '.mainContainer': {\n      display: 'flex',\n      justifyContent: 'center'\n    },\n    '.mainContent': {\n      maxWidth: '1200px',\n      flexGrow: '1',\n      margin: '25px',\n      backgroundColor: '#ffffff',\n      padding: '25px',\n      borderRadius: '8px'\n    }\n  },\n  appBarSpacer: {\n    height: '49px'\n  }\n}\n\nclass App extends Component {\n  render() {\n    const { classes, location } = this.props\n\n    return (\n      <SessionNotificationProvider>\n        <MuiThemeProvider theme={theme}>\n          <div>\n            <CssBaseline />\n            <AppBar />\n            {!isHomepage(location) && (\n              <div className={classes.appBarSpacer}></div>\n            )}\n            <Switch>\n              <Route exact path={Routes.home} component={HomePage} />\n              <Route path={Routes.dashboard} component={DashboardPage} />\n              <Route path={Routes.venue} component={VenuePage} />\n              <Route path={Routes.userProfile} component={UserProfilePage} />\n              <Route path={Routes.messages} component={MessagesPage} />\n            </Switch>\n            <SessionNotifications></SessionNotifications>\n          </div>\n        </MuiThemeProvider>\n      </SessionNotificationProvider>\n    )\n  }\n}\n\nexport default withRouter(withStyles(styles)(App))\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport {\n  ApolloClient,\n  ApolloProvider,\n  ApolloLink,\n  HttpLink\n} from '@apollo/client'\nimport { InMemoryCache } from '@apollo/client/cache'\nimport { onError } from '@apollo/client/link/error'\n\nimport App from './App'\nimport * as serviceWorker from './serviceWorker'\nimport { BrowserRouter } from 'react-router-dom'\nimport 'typeface-roboto'\nimport { getUserInfoFromStorage } from './utils/userUtils'\nimport { AUTH_TOKEN } from './constants'\nimport { CURRENT_USER_QUERY } from './graphql/userQueries'\n\nconst SERVER_HOST = process.env.REACT_APP_SERVER_HOST\n\nconst token = localStorage.getItem(AUTH_TOKEN)\nconst httpLink = new HttpLink({\n  uri: SERVER_HOST, // || 'http://localhost:4000',\n  credentials: 'same-origin',\n  // fetchOptions: {\n  //   mode: 'cors'\n  // },\n  headers: {\n    authorization: token ? `Bearer ${token}` : ''\n  }\n})\n\nconst client = new ApolloClient({\n  link: ApolloLink.from([\n    onError(({ graphQLErrors, networkError }) => {\n      if (graphQLErrors)\n        graphQLErrors.map(({ message, locations, path }) =>\n          console.log(\n            `[GraphQL error]: Message: ${message}, Location: ${locations}, Path: ${path}`\n          )\n        )\n      if (networkError) console.log(`[Network error]: ${networkError}`)\n    }),\n    httpLink\n  ]),\n  cache: new InMemoryCache({\n    typePolicies: {\n      User: {\n        fields: {\n          followees: {\n            merge: false\n          },\n          favoriteVenues: {\n            merge: false\n          }\n        }\n      }\n    }\n  }),\n  resolvers: {}\n})\n\nclient.writeQuery({\n  query: CURRENT_USER_QUERY,\n  data: {\n    currentUser: { ...getUserInfoFromStorage() }\n  }\n})\n\nReactDOM.render(\n  <BrowserRouter>\n    <ApolloProvider client={client}>\n      <App />\n    </ApolloProvider>\n  </BrowserRouter>,\n  document.getElementById('root')\n)\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister()\n"],"sourceRoot":""}